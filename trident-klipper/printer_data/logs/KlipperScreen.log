2023-11-23 19:24:14,371 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}\n\n{% set CHAMBER_TEMP = params.CHAMBER|float %}\n{% set MATERIAL = params.MATERIAL|string %}\n\n{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}\n\nG32\nG1 Z100 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}\n\n{% set CHAMBER_TEMP = params.CHAMBER|float %}\n{% set MATERIAL = params.MATERIAL|string %}\n\n{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}\n\nG32\nG1 Z100 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:24:14,375 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:24:14,375 [printer.py:reinit()] - # Extruders: 1
2023-11-23 19:24:14,375 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 19:24:14,375 [printer.py:reinit()] - # Fans: 3
2023-11-23 19:24:14,375 [printer.py:reinit()] - # Output pins: 1
2023-11-23 19:24:14,375 [printer.py:reinit()] - # Leds: 1
2023-11-23 19:24:14,384 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-23 19:24:14,384 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-23 19:24:14,384 [functions.py:log_start()] - Python version: 3.9
2023-11-23 19:24:14,402 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:24:14,403 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:24:14,662 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 19:24:14,684 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 19:24:14,690 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 19:24:14,698 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 19:24:14,699 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 19:24:14,700 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:24:14,700 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:24:14,700 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:24:14,701 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 19:24:14,701 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:24:14,705 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:24:14,767 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 19:24:14,775 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 19:24:14,780 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 19:24:14,785 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 19:24:14,790 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 19:24:14,795 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 19:24:14,831 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 19:24:21,924 [screen.py:show_popup_message()] - error: // Unknown command:"START_PRINT"
2023-11-23 19:24:22,002 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 19:24:22,011 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 0.200 [0.000]
2023-11-23 19:24:28,354 [screen.py:show_popup_message()] - error: Must home X and Y axes first
2023-11-23 19:24:45,685 [screen.py:show_popup_message()] - error: // Unknown command:"START_PRINT"
2023-11-23 19:24:45,764 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 19:24:45,773 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-11-23 19:25:51,403 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 19:25:51,404 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:25:51,405 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:25:51,410 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:25:51,482 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:25:55,092 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:25:55,099 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:25:55,101 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:25:55,108 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:25:55,109 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:25:55,118 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:25:55,172 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:25:55,174 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}\n\n\n{% set MATERIAL = params.MATERIAL|string %}\n\n{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}\n\nG32\nG1 Z100 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}\n\n\n{% set MATERIAL = params.MATERIAL|string %}\n\n{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}\n\nG32\nG1 Z100 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:25:55,178 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:25:55,178 [printer.py:reinit()] - # Extruders: 1
2023-11-23 19:25:55,179 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 19:25:55,179 [printer.py:reinit()] - # Fans: 3
2023-11-23 19:25:55,179 [printer.py:reinit()] - # Output pins: 1
2023-11-23 19:25:55,179 [printer.py:reinit()] - # Leds: 1
2023-11-23 19:25:55,202 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:25:55,203 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:25:55,460 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 19:25:55,480 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 19:25:55,486 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 19:25:55,495 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 19:25:55,496 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 19:25:55,496 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:25:55,496 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:25:55,496 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:25:55,497 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 19:25:55,497 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:25:55,502 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:25:55,563 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 19:25:55,570 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 19:25:55,576 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 19:25:55,582 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 19:25:55,587 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 19:25:55,592 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 19:25:55,629 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 19:27:04,509 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-64x64.png. Retrying in 6 seconds
2023-11-23 19:27:04,510 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-400x300.png. Retrying in 6 seconds
2023-11-23 19:27:04,511 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-32x32.png. Retrying in 6 seconds
2023-11-23 19:27:09,447 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER_TEMP'
2023-11-23 19:28:36,186 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 19:28:36,187 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 19:28:36,199 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:28:36,317 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 19:28:36,321 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 19:28:36,328 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c.gcode Size: 545764
2023-11-23 19:28:36,335 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 19:28:36,339 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER_TEMP'
2023-11-23 19:28:36,415 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 19:28:37,161 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 19:28:37,162 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:33:58,322 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER_TEMP'
2023-11-23 19:34:26,309 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s-300x300.png. Retrying in 6 seconds
2023-11-23 19:34:26,309 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s-32x32.png. Retrying in 6 seconds
2023-11-23 19:34:46,377 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s-300x300.png. Retrying in 6 seconds
2023-11-23 19:34:46,377 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s-32x32.png. Retrying in 6 seconds
2023-11-23 19:34:49,762 [files.py:add_file()] - File already exists: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 19:34:49,770 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s-300x300.png. Retrying in 6 seconds
2023-11-23 19:34:49,771 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s-32x32.png. Retrying in 6 seconds
2023-11-23 19:41:48,521 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 19:41:48,522 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:41:48,523 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:41:48,526 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:41:48,596 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:41:52,092 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:41:52,102 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:41:52,103 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:41:52,111 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:41:52,112 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:41:52,120 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:41:52,302 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:41:52,305 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\n\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\n\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:41:52,309 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:41:52,309 [printer.py:reinit()] - # Extruders: 1
2023-11-23 19:41:52,309 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 19:41:52,309 [printer.py:reinit()] - # Fans: 3
2023-11-23 19:41:52,310 [printer.py:reinit()] - # Output pins: 1
2023-11-23 19:41:52,310 [printer.py:reinit()] - # Leds: 1
2023-11-23 19:41:52,334 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:41:52,335 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:41:52,595 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 19:41:52,621 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 19:41:52,626 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 19:41:52,635 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 19:41:52,636 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 19:41:52,636 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:41:52,637 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:41:52,637 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:41:52,638 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 19:41:52,638 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:41:52,641 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:41:52,701 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 19:41:52,708 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 19:41:52,714 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 19:41:52,719 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 19:41:52,724 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 19:41:52,729 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 19:41:52,765 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 19:45:05,641 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 19:45:05,642 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 19:45:05,653 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:45:05,766 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 19:45:05,771 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 19:45:05,778 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode Size: 652985
2023-11-23 19:45:05,785 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 20:00:17,986 [screen.py:show_popup_message()] - error: Unknown sensor 'temperature_sensor chamber'
2023-11-23 20:00:18,042 [screen.py:show_popup_message()] - error: Unknown sensor 'temperature_sensor chamber'
2023-11-23 20:00:18,200 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 20:00:21,202 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 20:00:21,202 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:01:21,343 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 20:01:21,344 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 20:01:21,344 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 20:01:21,347 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:01:21,385 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 20:01:25,092 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:01:25,099 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:01:25,100 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 20:01:25,108 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 20:01:25,109 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 20:01:25,117 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 20:01:25,163 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 20:01:25,166 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PIN=nevermore VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PIN=nevermore VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 20:01:25,170 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 20:01:25,170 [printer.py:reinit()] - # Extruders: 1
2023-11-23 20:01:25,170 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 20:01:25,170 [printer.py:reinit()] - # Fans: 3
2023-11-23 20:01:25,170 [printer.py:reinit()] - # Output pins: 1
2023-11-23 20:01:25,170 [printer.py:reinit()] - # Leds: 1
2023-11-23 20:01:25,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 20:01:25,208 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 20:01:25,451 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 20:01:25,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 20:01:25,478 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 20:01:25,486 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 20:01:25,486 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 20:01:25,487 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 20:01:25,487 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 20:01:25,487 [screen.py:init_printer()] - Printer initialized
2023-11-23 20:01:25,488 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 20:01:25,488 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:01:25,491 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:01:25,551 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 20:01:25,559 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 20:01:25,564 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 20:01:25,570 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 20:01:25,575 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 20:01:25,580 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 20:01:25,616 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 20:01:34,926 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 20:01:34,926 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 20:01:34,938 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:01:35,056 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 20:01:35,060 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 20:01:35,068 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode Size: 652985
2023-11-23 20:01:35,075 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 20:01:45,513 [screen.py:show_popup_message()] - error: The value 'nevermore' is not valid for PIN
2023-11-23 20:01:45,587 [screen.py:show_popup_message()] - error: The value 'nevermore' is not valid for PIN
2023-11-23 20:01:45,711 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 20:01:49,465 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 20:01:49,465 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:03:24,198 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 20:03:24,198 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 20:03:24,199 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 20:03:24,202 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:03:24,278 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 20:03:27,092 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:03:27,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:03:27,101 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 20:03:27,108 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 20:03:27,110 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 20:03:27,119 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 20:03:27,139 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 20:03:27,141 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PD12=nevermore VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PD12=nevermore VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 20:03:27,147 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 20:03:27,147 [printer.py:reinit()] - # Extruders: 1
2023-11-23 20:03:27,147 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 20:03:27,147 [printer.py:reinit()] - # Fans: 3
2023-11-23 20:03:27,147 [printer.py:reinit()] - # Output pins: 1
2023-11-23 20:03:27,147 [printer.py:reinit()] - # Leds: 1
2023-11-23 20:03:27,160 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 20:03:27,161 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 20:03:27,433 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 20:03:27,457 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 20:03:27,462 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 20:03:27,470 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 20:03:27,471 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 20:03:27,471 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 20:03:27,471 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 20:03:27,471 [screen.py:init_printer()] - Printer initialized
2023-11-23 20:03:27,472 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 20:03:27,472 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:03:27,476 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:03:27,538 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 20:03:27,546 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 20:03:27,551 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 20:03:27,556 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 20:03:27,561 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 20:03:27,566 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 20:03:27,605 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 20:03:28,561 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 20:03:28,561 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 20:03:28,562 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 20:03:28,564 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:03:28,604 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 20:03:32,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:03:32,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:03:32,101 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 20:03:32,113 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 20:03:32,114 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 20:03:32,123 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 20:03:32,215 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 20:03:32,217 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PD12=nevermore VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PD12=nevermore VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 20:03:32,221 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 20:03:32,221 [printer.py:reinit()] - # Extruders: 1
2023-11-23 20:03:32,222 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 20:03:32,222 [printer.py:reinit()] - # Fans: 3
2023-11-23 20:03:32,222 [printer.py:reinit()] - # Output pins: 1
2023-11-23 20:03:32,222 [printer.py:reinit()] - # Leds: 1
2023-11-23 20:03:32,233 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 20:03:32,234 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 20:03:32,516 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 20:03:32,536 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 20:03:32,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 20:03:32,553 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 20:03:32,554 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 20:03:32,554 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 20:03:32,555 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 20:03:32,555 [screen.py:init_printer()] - Printer initialized
2023-11-23 20:03:32,555 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 20:03:32,556 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:03:32,559 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:03:32,623 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 20:03:32,631 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 20:03:32,636 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 20:03:32,642 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 20:03:32,647 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 20:03:32,652 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 20:03:32,693 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 20:03:39,229 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 20:03:39,229 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 20:03:39,243 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:03:39,367 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 20:03:39,372 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 20:03:39,379 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode Size: 652985
2023-11-23 20:03:39,387 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 20:03:49,303 [screen.py:show_popup_message()] - error: Error on 'SET_PIN PD12=nevermore VALUE=1': missing PIN
2023-11-23 20:03:49,371 [screen.py:show_popup_message()] - error: Error on 'SET_PIN PD12=nevermore VALUE=1': missing PIN
2023-11-23 20:03:49,515 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 20:03:53,265 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 20:03:53,265 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:04:13,120 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 20:04:13,120 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 20:04:13,123 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 20:04:13,128 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:04:13,210 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 20:04:16,094 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:04:16,103 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:04:16,104 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 20:04:16,113 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 20:04:16,115 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 20:04:16,124 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 20:04:16,145 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 20:04:16,149 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PD13=nevermore VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PD13=nevermore VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 20:04:16,153 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 20:04:16,154 [printer.py:reinit()] - # Extruders: 1
2023-11-23 20:04:16,154 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 20:04:16,154 [printer.py:reinit()] - # Fans: 3
2023-11-23 20:04:16,154 [printer.py:reinit()] - # Output pins: 1
2023-11-23 20:04:16,154 [printer.py:reinit()] - # Leds: 1
2023-11-23 20:04:16,167 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 20:04:16,169 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 20:04:16,438 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 20:04:16,459 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 20:04:16,464 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 20:04:16,472 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 20:04:16,473 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 20:04:16,474 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 20:04:16,474 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 20:04:16,474 [screen.py:init_printer()] - Printer initialized
2023-11-23 20:04:16,475 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 20:04:16,475 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:04:16,479 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:04:16,540 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 20:04:16,548 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 20:04:16,554 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 20:04:16,560 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 20:04:16,565 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 20:04:16,570 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 20:04:16,607 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 20:04:27,425 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 20:04:27,426 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 20:04:27,440 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:04:27,561 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 20:04:27,566 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 20:04:27,573 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode Size: 652985
2023-11-23 20:04:27,581 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 20:04:37,421 [screen.py:show_popup_message()] - error: Error on 'SET_PIN PD13=nevermore VALUE=1': missing PIN
2023-11-23 20:04:37,504 [screen.py:show_popup_message()] - error: Error on 'SET_PIN PD13=nevermore VALUE=1': missing PIN
2023-11-23 20:04:37,516 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 20:04:41,231 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 20:04:41,232 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:07:08,394 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 20:07:08,394 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 20:07:08,395 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 20:07:08,396 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:07:08,436 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 20:07:12,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:07:12,101 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:07:12,102 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 20:07:12,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 20:07:12,110 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 20:07:12,118 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 20:07:12,260 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 20:07:12,262 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 20:07:12,267 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 20:07:12,267 [printer.py:reinit()] - # Extruders: 1
2023-11-23 20:07:12,267 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 20:07:12,267 [printer.py:reinit()] - # Fans: 3
2023-11-23 20:07:12,267 [printer.py:reinit()] - # Output pins: 1
2023-11-23 20:07:12,267 [printer.py:reinit()] - # Leds: 1
2023-11-23 20:07:12,296 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 20:07:12,298 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 20:07:12,550 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 20:07:12,572 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 20:07:12,577 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 20:07:12,587 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 20:07:12,588 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 20:07:12,589 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 20:07:12,589 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 20:07:12,591 [screen.py:init_printer()] - Printer initialized
2023-11-23 20:07:12,591 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 20:07:12,592 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:07:12,596 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:07:12,660 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 20:07:12,669 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 20:07:12,674 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 20:07:12,679 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 20:07:12,685 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 20:07:12,690 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 20:07:12,727 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 20:07:52,085 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 20:08:10,939 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 20:08:10,940 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 20:08:10,941 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-23 20:08:10,965 [screen.py:wake_screen()] - Screen wake up
2023-11-23 20:08:10,973 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:08:11,095 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 20:08:11,100 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 20:08:11,107 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode Size: 652985
2023-11-23 20:08:11,114 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 20:25:30,839 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-23 20:25:33,065 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 20:25:33,065 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:35:09,614 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 20:35:09,614 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 20:35:09,615 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 20:35:09,617 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:35:09,692 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 20:35:13,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:35:13,101 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:35:13,102 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 20:35:13,110 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 20:35:13,111 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 20:35:13,120 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 20:35:13,179 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 20:35:13,182 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PD13=Bedfans VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nSET_PIN PD13=Bedfans VALUE=1\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 20:35:13,187 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 20:35:13,187 [printer.py:reinit()] - # Extruders: 1
2023-11-23 20:35:13,187 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 20:35:13,187 [printer.py:reinit()] - # Fans: 3
2023-11-23 20:35:13,188 [printer.py:reinit()] - # Output pins: 1
2023-11-23 20:35:13,188 [printer.py:reinit()] - # Leds: 1
2023-11-23 20:35:13,202 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 20:35:13,204 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 20:35:13,458 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 20:35:13,512 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 20:35:13,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 20:35:13,525 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 20:35:13,525 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 20:35:13,526 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 20:35:13,526 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 20:35:13,526 [screen.py:init_printer()] - Printer initialized
2023-11-23 20:35:13,527 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 20:35:13,527 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:35:13,530 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:35:13,591 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 20:35:13,599 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 20:35:13,605 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 20:35:13,612 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 20:35:13,617 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 20:35:13,622 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 20:35:13,659 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 20:36:09,348 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 20:36:09,348 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 20:36:09,364 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:36:09,483 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 20:36:09,488 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 20:36:09,495 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode Size: 652985
2023-11-23 20:36:09,503 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 20:36:19,439 [screen.py:show_popup_message()] - error: Error on 'SET_PIN PD13=Bedfans VALUE=1': missing PIN
2023-11-23 20:36:19,504 [screen.py:show_popup_message()] - error: Error on 'SET_PIN PD13=Bedfans VALUE=1': missing PIN
2023-11-23 20:36:19,627 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 20:36:23,380 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 20:36:23,380 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:38:49,377 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 20:38:49,377 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 20:38:49,378 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 20:38:49,379 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:38:49,418 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 20:38:53,106 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:38:53,126 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:38:53,129 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 20:38:53,147 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 20:38:53,148 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 20:38:53,167 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 20:38:53,469 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 20:38:53,476 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 20:38:53,488 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 20:38:53,488 [printer.py:reinit()] - # Extruders: 1
2023-11-23 20:38:53,488 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 20:38:53,489 [printer.py:reinit()] - # Fans: 3
2023-11-23 20:38:53,489 [printer.py:reinit()] - # Output pins: 1
2023-11-23 20:38:53,490 [printer.py:reinit()] - # Leds: 1
2023-11-23 20:38:53,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 20:38:53,548 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 20:38:53,788 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 20:38:53,892 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 20:38:53,906 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 20:38:53,932 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 20:38:53,934 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 20:38:53,935 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 20:38:53,935 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 20:38:53,937 [screen.py:init_printer()] - Printer initialized
2023-11-23 20:38:53,938 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 20:38:53,938 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:38:53,946 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:38:54,106 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 20:38:54,127 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 20:38:54,139 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 20:38:54,152 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 20:38:54,164 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 20:38:54,176 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 20:38:54,278 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 20:39:04,483 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 20:39:04,484 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 20:39:04,508 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 20:39:04,664 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 20:39:04,670 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 20:39:04,677 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode Size: 652985
2023-11-23 20:39:04,684 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 20:33:34,131 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-23 20:33:34,132 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-23 20:33:34,132 [functions.py:log_start()] - Python version: 3.9
2023-11-23 20:33:34,473 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-11-23 20:33:34,474 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-11-23 20:33:34,503 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-23 20:33:34,685 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-11-23 20:33:34,685 [config.py:install_language()] - Using system lang
2023-11-23 20:33:34,687 [config.py:install_language()] - Using lang en
2023-11-23 20:33:34,718 [screen.py:__init__()] - Screen resolution: 1024x768
2023-11-23 20:33:34,720 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-11-23 20:33:35,862 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-23 20:33:35,876 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-23 20:33:35,884 [screen.py:initial_connection()] - Default printer: None
2023-11-23 20:33:35,884 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 20:33:35,885 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-23 20:33:35,940 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 20:33:35,948 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 20:33:35,964 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:33:35,973 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 20:33:35,974 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 20:33:35,985 [_logging.py:info()] - Websocket connected
2023-11-23 20:33:35,985 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 20:33:36,088 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:33:36,096 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 20:33:36,097 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 20:33:36,104 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 20:33:36,105 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 20:33:36,115 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 20:33:36,379 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 20:33:36,382 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 20:33:36,386 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 20:33:36,386 [printer.py:reinit()] - # Extruders: 1
2023-11-23 20:33:36,386 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 20:33:36,386 [printer.py:reinit()] - # Fans: 3
2023-11-23 20:33:36,386 [printer.py:reinit()] - # Output pins: 1
2023-11-23 20:33:36,386 [printer.py:reinit()] - # Leds: 1
2023-11-23 20:33:36,397 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 20:33:36,398 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 20:33:36,688 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 20:33:36,699 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 20:33:36,714 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 20:33:36,723 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 20:33:36,724 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 20:33:36,725 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 20:33:36,725 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 20:33:36,726 [screen.py:init_printer()] - Printer initialized
2023-11-23 20:33:36,727 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 20:33:36,727 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 20:33:36,733 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-23 20:33:36,805 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 20:33:36,814 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 20:33:36,821 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 20:33:36,828 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 20:33:36,833 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 20:33:36,839 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 20:33:36,878 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 20:55:25,784 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 20:55:25,784 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 20:55:25,794 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-23 20:55:26,012 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 20:55:26,017 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 20:55:26,028 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode Size: 652985
2023-11-23 20:55:26,041 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c_ABS_6m57s.gcode
2023-11-23 21:09:22,023 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-23 21:09:24,520 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 21:09:24,521 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 21:13:58,574 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2023-11-23 21:16:05,401 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 21:16:05,401 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 21:16:05,401 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 21:16:05,403 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 21:16:05,441 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 21:16:08,844 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 21:16:08,852 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 21:16:08,853 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 21:16:08,860 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 21:16:08,862 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 21:16:08,870 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 21:16:08,946 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 21:16:08,954 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 21:16:08,960 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 21:16:08,960 [printer.py:reinit()] - # Extruders: 1
2023-11-23 21:16:08,960 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 21:16:08,961 [printer.py:reinit()] - # Fans: 3
2023-11-23 21:16:08,961 [printer.py:reinit()] - # Output pins: 1
2023-11-23 21:16:08,961 [printer.py:reinit()] - # Leds: 1
2023-11-23 21:16:08,974 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 21:16:08,975 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 21:16:09,246 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 21:16:09,271 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 21:16:09,276 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 21:16:09,286 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 21:16:09,287 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 21:16:09,287 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 21:16:09,287 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 21:16:09,287 [screen.py:init_printer()] - Printer initialized
2023-11-23 21:16:09,288 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 21:16:09,288 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 21:16:09,290 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 21:16:09,363 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 21:16:09,371 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 21:16:09,376 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 21:16:09,385 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 21:16:09,394 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 21:16:09,403 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 21:16:09,472 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 21:17:27,136 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-23 21:17:27,137 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-23 21:17:27,137 [functions.py:log_start()] - Python version: 3.9
2023-11-23 21:17:27,483 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-11-23 21:17:27,487 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-11-23 21:17:27,516 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-23 21:17:27,700 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-11-23 21:17:27,701 [config.py:install_language()] - Using system lang
2023-11-23 21:17:27,702 [config.py:install_language()] - Using lang en
2023-11-23 21:17:27,734 [screen.py:__init__()] - Screen resolution: 1024x768
2023-11-23 21:17:27,737 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-11-23 21:17:28,392 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-23 21:17:28,400 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-23 21:17:28,406 [screen.py:initial_connection()] - Default printer: None
2023-11-23 21:17:28,406 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 21:17:28,407 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-23 21:17:28,455 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 21:17:28,461 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 21:17:28,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 21:17:28,481 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 21:17:28,482 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 21:17:28,490 [_logging.py:info()] - Websocket connected
2023-11-23 21:17:28,490 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 21:17:28,573 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 21:17:28,581 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 21:17:28,582 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'timelapse', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 21:17:28,589 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 21:17:28,590 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 21:17:28,598 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 21:17:28,711 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 21:17:28,714 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 21:17:28,718 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 21:17:28,718 [printer.py:reinit()] - # Extruders: 1
2023-11-23 21:17:28,718 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 21:17:28,718 [printer.py:reinit()] - # Fans: 3
2023-11-23 21:17:28,718 [printer.py:reinit()] - # Output pins: 1
2023-11-23 21:17:28,719 [printer.py:reinit()] - # Leds: 1
2023-11-23 21:17:28,731 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 21:17:28,733 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 21:17:29,017 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 21:17:29,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 21:17:29,044 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 21:17:29,054 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 21:17:29,055 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 21:17:29,056 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 21:17:29,056 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 21:17:29,058 [screen.py:init_printer()] - Printer initialized
2023-11-23 21:17:29,058 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 21:17:29,058 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 21:17:29,061 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-23 21:17:29,130 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 21:17:29,138 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 21:17:29,145 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 21:17:29,152 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 21:17:29,158 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 21:17:29,163 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 21:17:29,201 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 22:51:48,620 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 22:51:48,621 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 22:51:48,622 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 22:51:48,624 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 22:51:48,670 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 22:51:52,302 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:51:52,322 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:51:52,323 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'timelapse', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 22:51:52,335 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 22:51:52,336 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 22:51:52,336 [screen.py:init_printer()] - Klipper not connected
2023-11-23 22:51:55,298 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:51:55,317 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:51:55,319 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'timelapse', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 22:51:55,336 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 22:51:55,338 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 22:51:55,338 [screen.py:init_printer()] - Klipper not connected
2023-11-23 22:51:58,300 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:51:58,315 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:51:58,317 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'timelapse', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 22:51:58,332 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 22:51:58,333 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 22:51:58,334 [screen.py:init_printer()] - Klipper not connected
2023-11-23 22:52:01,298 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:52:01,314 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:52:01,315 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'timelapse', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 22:52:01,328 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 22:52:01,330 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 22:52:01,331 [screen.py:init_printer()] - Klipper not connected
2023-11-23 22:52:04,299 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:52:04,318 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 22:52:04,321 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'timelapse', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 22:52:04,336 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 22:52:04,338 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 22:52:04,338 [screen.py:init_printer()] - Klipper not connected
2023-11-23 22:52:22,234 [screen.py:_websocket_callback()] - Still not initialized
2023-11-23 22:58:44,838 [screen.py:_websocket_callback()] - Still not initialized
2023-11-23 23:04:32,972 [screen.py:_websocket_callback()] - Still not initialized
2023-11-23 23:04:59,978 [screen.py:show_popup_message()] - error: // Author identity unknown
// 
// *** Please tell me who you are.
// 
// Run
// 
// git config --global user.email "you@example.com"
// git config --global user.name "Your Name"
// 
// to set your account's default identity.
// Omit --global to set the identity only in this repository.
// 
// fatal: unable to auto-detect email address (got 'pi@raspberrypi.(none)')
2023-11-23 23:10:55,418 [screen.py:show_popup_message()] - error: // Author identity unknown
2023-11-23 23:15:39,283 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 23:23:51,554 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-23 23:23:51,554 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-23 23:23:51,554 [functions.py:log_start()] - Python version: 3.9
2023-11-23 23:23:51,711 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-11-23 23:23:51,713 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-11-23 23:23:51,725 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-23 23:23:51,807 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-11-23 23:23:51,807 [config.py:install_language()] - Using system lang
2023-11-23 23:23:51,808 [config.py:install_language()] - Using lang en
2023-11-23 23:23:51,822 [screen.py:__init__()] - Screen resolution: 1024x768
2023-11-23 23:23:51,823 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-11-23 23:23:52,480 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-23 23:23:52,489 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-23 23:23:52,496 [screen.py:initial_connection()] - Default printer: None
2023-11-23 23:23:52,496 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 23:23:52,496 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-23 23:23:52,541 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 23:23:52,547 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 23:23:52,560 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:23:52,568 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 23:23:52,569 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 23:23:52,576 [_logging.py:info()] - Websocket connected
2023-11-23 23:23:52,576 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 23:23:52,661 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:23:52,669 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:23:52,669 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'octoprint_compat', 'history', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 23:23:52,677 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 23:23:52,677 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 23:23:52,686 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 23:23:52,954 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 23:23:52,957 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 23:23:52,962 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-23 23:23:52,962 [printer.py:reinit()] - # Extruders: 1
2023-11-23 23:23:52,962 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 23:23:52,962 [printer.py:reinit()] - # Fans: 3
2023-11-23 23:23:52,962 [printer.py:reinit()] - # Output pins: 1
2023-11-23 23:23:52,962 [printer.py:reinit()] - # Leds: 1
2023-11-23 23:23:52,973 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 23:23:52,975 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 23:23:53,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 23:23:53,272 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 23:23:53,288 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 23:23:53,297 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 23:23:53,298 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 23:23:53,298 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 23:23:53,298 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 23:23:53,299 [screen.py:init_printer()] - Printer initialized
2023-11-23 23:23:53,300 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 23:23:53,300 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 23:23:53,303 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-23 23:23:53,372 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 23:23:53,383 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 23:23:53,390 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 23:23:53,397 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 23:23:53,402 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 23:23:53,407 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 23:23:53,447 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 23:38:04,470 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 23:38:04,471 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 23:38:04,474 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 23:38:04,480 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 23:38:04,547 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 23:38:07,410 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:38:07,418 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:38:07,419 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'octoprint_compat', 'history', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 23:38:07,426 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 23:38:07,427 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 23:38:07,436 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 23:38:07,455 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 23:38:07,459 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 23:38:07,463 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-23 23:38:07,464 [printer.py:reinit()] - # Extruders: 1
2023-11-23 23:38:07,464 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 23:38:07,464 [printer.py:reinit()] - # Fans: 3
2023-11-23 23:38:07,464 [printer.py:reinit()] - # Output pins: 1
2023-11-23 23:38:07,464 [printer.py:reinit()] - # Leds: 1
2023-11-23 23:38:07,476 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 23:38:07,478 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 23:38:07,749 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 23:38:07,763 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 23:38:07,778 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 23:38:07,787 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 23:38:07,787 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 23:38:07,788 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 23:38:07,788 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 23:38:07,788 [screen.py:init_printer()] - Printer initialized
2023-11-23 23:38:07,789 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 23:38:07,789 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 23:38:07,794 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 23:38:07,858 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 23:38:07,866 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 23:38:07,871 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 23:38:07,877 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 23:38:07,882 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 23:38:07,888 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 23:38:07,924 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 23:41:30,041 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 23:41:30,041 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 23:41:30,042 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 23:41:30,046 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 23:41:30,090 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 23:41:33,410 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:41:33,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:41:33,421 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'octoprint_compat', 'history', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 23:41:33,429 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 23:41:33,431 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 23:41:33,481 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 23:41:33,509 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 23:41:33,513 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 23:41:33,520 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-23 23:41:33,520 [printer.py:reinit()] - # Extruders: 1
2023-11-23 23:41:33,520 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 23:41:33,520 [printer.py:reinit()] - # Fans: 3
2023-11-23 23:41:33,520 [printer.py:reinit()] - # Output pins: 1
2023-11-23 23:41:33,520 [printer.py:reinit()] - # Leds: 1
2023-11-23 23:41:33,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 23:41:33,546 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 23:41:33,795 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 23:41:33,810 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 23:41:33,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 23:41:33,832 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 23:41:33,833 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 23:41:33,833 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 23:41:33,833 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 23:41:33,834 [screen.py:init_printer()] - Printer initialized
2023-11-23 23:41:33,834 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-23 23:41:33,834 [printer.py:change_state()] - Adding callback for state: startup
2023-11-23 23:41:34,746 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-23 23:41:34,747 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 23:41:34,749 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 23:41:34,807 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 23:41:34,815 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 23:41:34,821 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 23:41:34,826 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 23:41:34,831 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 23:41:34,836 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 23:41:34,871 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 23:43:59,688 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 23:43:59,689 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 23:43:59,690 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 23:43:59,694 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 23:43:59,772 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 23:44:03,427 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:44:03,446 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 23:44:03,448 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'octoprint_compat', 'history', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 23:44:03,466 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 23:44:03,468 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 23:44:03,490 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 23:44:03,539 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 23:44:03,548 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 23:44:03,561 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-23 23:44:03,561 [printer.py:reinit()] - # Extruders: 1
2023-11-23 23:44:03,562 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 23:44:03,562 [printer.py:reinit()] - # Fans: 3
2023-11-23 23:44:03,562 [printer.py:reinit()] - # Output pins: 1
2023-11-23 23:44:03,563 [printer.py:reinit()] - # Leds: 1
2023-11-23 23:44:03,588 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 23:44:03,592 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 23:44:03,865 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 23:44:03,948 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 23:44:03,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 23:44:04,003 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 23:44:04,006 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 23:44:04,007 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 23:44:04,007 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 23:44:04,011 [screen.py:init_printer()] - Printer initialized
2023-11-23 23:44:04,012 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 23:44:04,013 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 23:44:04,020 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 23:44:04,172 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 23:44:04,193 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 23:44:04,209 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 23:44:04,228 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 23:44:04,240 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 23:44:04,253 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 23:44:04,358 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 23:46:13,615 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-23 23:46:13,616 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-23 23:46:13,616 [functions.py:log_start()] - Python version: 3.9
2023-11-23 23:46:13,782 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-11-23 23:46:13,784 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-11-23 23:46:13,797 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-23 23:46:13,879 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-11-23 23:46:13,879 [config.py:install_language()] - Using system lang
2023-11-23 23:46:13,879 [config.py:install_language()] - Using lang en
2023-11-23 23:46:13,893 [screen.py:__init__()] - Screen resolution: 1024x768
2023-11-23 23:46:13,894 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-11-23 23:46:14,542 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-23 23:46:14,550 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-23 23:46:14,558 [screen.py:initial_connection()] - Default printer: None
2023-11-23 23:46:14,558 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 23:46:14,558 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-23 23:46:14,603 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 23:46:14,609 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 23:46:14,622 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-24 06:23:04,130 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-24 06:23:04,141 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:23:04,149 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-24 06:23:04,150 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-24 06:23:04,157 [_logging.py:info()] - Websocket connected
2023-11-24 06:23:04,157 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-24 06:23:04,167 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:23:04,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:23:04,176 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'authorization', 'timelapse', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 06:23:04,183 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 06:23:04,184 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 06:23:04,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-24 06:23:04,423 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-24 06:23:04,426 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-24 06:23:04,430 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-24 06:23:04,430 [printer.py:reinit()] - # Extruders: 1
2023-11-24 06:23:04,431 [printer.py:reinit()] - # Temperature devices: 4
2023-11-24 06:23:04,431 [printer.py:reinit()] - # Fans: 3
2023-11-24 06:23:04,431 [printer.py:reinit()] - # Output pins: 1
2023-11-24 06:23:04,431 [printer.py:reinit()] - # Leds: 1
2023-11-24 06:23:04,442 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-24 06:23:04,443 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-24 06:23:04,728 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-24 06:23:04,738 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-24 06:23:04,754 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-24 06:23:04,763 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-24 06:23:04,764 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-24 06:23:04,764 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-24 06:23:04,764 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-24 06:23:04,764 [screen.py:init_printer()] - Printer initialized
2023-11-24 06:23:04,765 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-24 06:23:04,765 [printer.py:change_state()] - Adding callback for state: ready
2023-11-24 06:23:04,769 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-24 06:23:05,028 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-24 06:23:05,037 [main_menu.py:add_device()] - Adding device: extruder
2023-11-24 06:23:05,051 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-24 06:23:05,060 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-24 06:23:05,066 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-24 06:23:05,072 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-24 06:23:05,141 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-24 06:26:32,661 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-24 06:26:32,661 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-24 06:26:32,663 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-24 06:26:32,667 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 06:26:32,744 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-24 06:26:36,136 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:26:36,144 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:26:36,145 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'authorization', 'timelapse', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 06:26:36,152 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 06:26:36,153 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 06:26:36,161 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-24 06:26:36,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-24 06:26:36,191 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-24 06:26:36,195 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-24 06:26:36,195 [printer.py:reinit()] - # Extruders: 1
2023-11-24 06:26:36,195 [printer.py:reinit()] - # Temperature devices: 4
2023-11-24 06:26:36,195 [printer.py:reinit()] - # Fans: 3
2023-11-24 06:26:36,195 [printer.py:reinit()] - # Output pins: 1
2023-11-24 06:26:36,195 [printer.py:reinit()] - # Leds: 1
2023-11-24 06:26:36,207 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-24 06:26:36,209 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-24 06:26:36,490 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-24 06:26:36,502 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-24 06:26:36,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-24 06:26:36,526 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-24 06:26:36,527 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-24 06:26:36,527 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-24 06:26:36,528 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-24 06:26:36,529 [screen.py:init_printer()] - Printer initialized
2023-11-24 06:26:36,529 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-24 06:26:36,529 [printer.py:change_state()] - Adding callback for state: ready
2023-11-24 06:26:36,533 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 06:26:36,592 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-24 06:26:36,600 [main_menu.py:add_device()] - Adding device: extruder
2023-11-24 06:26:36,605 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-24 06:26:36,611 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-24 06:26:36,616 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-24 06:26:36,622 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-24 06:26:36,661 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-24 06:31:55,881 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-24 06:31:55,881 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-24 06:31:55,882 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-24 06:31:55,884 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 06:31:55,951 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-24 06:31:59,135 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:31:59,144 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:31:59,145 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'authorization', 'timelapse', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 06:31:59,152 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 06:31:59,153 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 06:31:59,162 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-24 06:31:59,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-24 06:31:59,196 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-24 06:31:59,197 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-24 06:31:59,197 [printer.py:reinit()] - # Extruders: 0
2023-11-24 06:31:59,197 [printer.py:reinit()] - # Temperature devices: 0
2023-11-24 06:31:59,197 [printer.py:reinit()] - # Fans: 0
2023-11-24 06:31:59,197 [printer.py:reinit()] - # Output pins: 0
2023-11-24 06:31:59,197 [printer.py:reinit()] - # Leds: 0
2023-11-24 06:31:59,207 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-24 06:31:59,208 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-24 06:31:59,447 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-11-24 06:31:59,447 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-24 06:31:59,448 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-24 06:31:59,450 [screen.py:init_printer()] - Printer initialized
2023-11-24 06:31:59,450 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-11-24 06:31:59,450 [printer.py:change_state()] - Adding callback for state: error
2023-11-24 06:31:59,452 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 06:31:59,491 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-24 06:34:32,851 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-11-24 06:34:32,851 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-24 06:34:32,851 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-24 06:34:32,852 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 06:34:32,898 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-24 06:34:36,137 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:34:36,146 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 06:34:36,148 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'authorization', 'timelapse', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 06:34:36,155 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 06:34:36,157 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 06:34:36,166 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-24 06:34:36,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-24 06:34:36,188 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-24 06:34:36,191 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-24 06:34:36,191 [printer.py:reinit()] - # Extruders: 1
2023-11-24 06:34:36,191 [printer.py:reinit()] - # Temperature devices: 4
2023-11-24 06:34:36,192 [printer.py:reinit()] - # Fans: 3
2023-11-24 06:34:36,192 [printer.py:reinit()] - # Output pins: 1
2023-11-24 06:34:36,192 [printer.py:reinit()] - # Leds: 1
2023-11-24 06:34:36,203 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-24 06:34:36,205 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-24 06:34:36,485 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-24 06:34:36,500 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-24 06:34:36,512 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-24 06:34:36,520 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-24 06:34:36,521 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-24 06:34:36,521 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-24 06:34:36,522 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-24 06:34:36,523 [screen.py:init_printer()] - Printer initialized
2023-11-24 06:34:36,523 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-24 06:34:36,523 [printer.py:change_state()] - Adding callback for state: ready
2023-11-24 06:34:36,527 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 06:34:36,586 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-24 06:34:36,594 [main_menu.py:add_device()] - Adding device: extruder
2023-11-24 06:34:36,599 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-24 06:34:36,604 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-24 06:34:36,609 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-24 06:34:36,614 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-24 06:34:36,650 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-24 07:07:23,654 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-24 07:07:23,654 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-24 07:07:23,659 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-24 07:07:23,662 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 07:07:23,717 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-24 07:07:27,150 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:07:27,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:07:27,177 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'authorization', 'timelapse', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 07:07:27,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 07:07:27,199 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 07:07:27,261 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-24 07:07:27,455 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-24 07:07:27,462 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-24 07:07:27,474 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-24 07:07:27,474 [printer.py:reinit()] - # Extruders: 1
2023-11-24 07:07:27,474 [printer.py:reinit()] - # Temperature devices: 4
2023-11-24 07:07:27,475 [printer.py:reinit()] - # Fans: 3
2023-11-24 07:07:27,475 [printer.py:reinit()] - # Output pins: 1
2023-11-24 07:07:27,475 [printer.py:reinit()] - # Leds: 1
2023-11-24 07:07:27,503 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-24 07:07:27,511 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-24 07:07:27,692 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-24 07:07:27,746 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-24 07:07:27,760 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-24 07:07:27,793 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-24 07:07:27,795 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-24 07:07:27,796 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-24 07:07:27,796 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-24 07:07:27,797 [screen.py:init_printer()] - Printer initialized
2023-11-24 07:07:27,798 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-24 07:07:27,799 [printer.py:change_state()] - Adding callback for state: ready
2023-11-24 07:07:27,806 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 07:07:27,967 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-24 07:07:27,989 [main_menu.py:add_device()] - Adding device: extruder
2023-11-24 07:07:28,002 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-24 07:07:28,023 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-24 07:07:28,039 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-24 07:07:28,053 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-24 07:07:28,166 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-24 07:08:11,543 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-24 07:08:11,544 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-24 07:08:11,544 [functions.py:log_start()] - Python version: 3.9
2023-11-24 07:08:11,701 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-11-24 07:08:11,701 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-11-24 07:08:11,712 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-24 07:08:11,790 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-11-24 07:08:11,790 [config.py:install_language()] - Using system lang
2023-11-24 07:08:11,791 [config.py:install_language()] - Using lang en
2023-11-24 07:08:11,805 [screen.py:__init__()] - Screen resolution: 1024x768
2023-11-24 07:08:11,805 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-11-24 07:08:12,460 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-24 07:08:12,468 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-24 07:08:12,475 [screen.py:initial_connection()] - Default printer: None
2023-11-24 07:08:12,475 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-24 07:08:12,475 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-24 07:08:12,523 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-24 07:08:12,529 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-24 07:08:12,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:08:12,553 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-24 07:08:12,554 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-24 07:08:12,562 [_logging.py:info()] - Websocket connected
2023-11-24 07:08:12,563 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-24 07:08:12,736 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:08:12,744 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:08:12,746 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'timelapse', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 07:08:12,753 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 07:08:12,755 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 07:08:12,775 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-11-24 07:08:13,449 [screen.py:_websocket_callback()] - Still not initialized
2023-11-24 07:08:16,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:08:16,207 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:08:16,208 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'timelapse', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 07:08:16,223 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 07:08:16,225 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 07:08:16,246 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-24 07:08:16,468 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-24 07:08:16,474 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-24 07:08:16,484 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-24 07:08:16,484 [printer.py:reinit()] - # Extruders: 1
2023-11-24 07:08:16,485 [printer.py:reinit()] - # Temperature devices: 4
2023-11-24 07:08:16,485 [printer.py:reinit()] - # Fans: 3
2023-11-24 07:08:16,485 [printer.py:reinit()] - # Output pins: 1
2023-11-24 07:08:16,485 [printer.py:reinit()] - # Leds: 1
2023-11-24 07:08:16,505 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-24 07:08:16,508 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-24 07:08:16,805 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-24 07:08:16,831 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-24 07:08:16,847 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-24 07:08:16,855 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-24 07:08:16,856 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-24 07:08:16,856 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-24 07:08:16,856 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-24 07:08:16,857 [screen.py:init_printer()] - Printer initialized
2023-11-24 07:08:16,857 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-24 07:08:16,857 [printer.py:change_state()] - Adding callback for state: ready
2023-11-24 07:08:16,860 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-24 07:08:16,929 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-24 07:08:16,937 [main_menu.py:add_device()] - Adding device: extruder
2023-11-24 07:08:16,946 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-24 07:08:16,953 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-24 07:08:16,958 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-24 07:08:16,963 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-24 07:08:16,999 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-24 07:25:37,569 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-24 07:25:37,570 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-24 07:25:37,570 [functions.py:log_start()] - Python version: 3.9
2023-11-24 07:25:37,732 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-11-24 07:25:37,734 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-11-24 07:25:37,746 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-24 07:25:37,832 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-11-24 07:25:37,832 [config.py:install_language()] - Using system lang
2023-11-24 07:25:37,833 [config.py:install_language()] - Using lang en
2023-11-24 07:25:37,846 [screen.py:__init__()] - Screen resolution: 1024x768
2023-11-24 07:25:37,847 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-11-24 07:25:38,508 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-24 07:25:38,517 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-24 07:25:38,524 [screen.py:initial_connection()] - Default printer: None
2023-11-24 07:25:38,524 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-24 07:25:38,524 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-24 07:25:38,573 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-24 07:25:38,580 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-24 07:25:38,604 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:25:38,614 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-24 07:25:38,615 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-24 07:25:38,626 [_logging.py:info()] - Websocket connected
2023-11-24 07:25:38,626 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-24 07:25:38,724 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:25:38,732 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:25:38,733 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'timelapse', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 07:25:38,740 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 07:25:38,741 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 07:25:38,762 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-11-24 07:25:39,418 [screen.py:_websocket_callback()] - Still not initialized
2023-11-24 07:25:42,241 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:25:42,256 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:25:42,258 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'timelapse', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 07:25:42,273 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 07:25:42,275 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 07:25:42,292 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-24 07:25:42,424 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-24 07:25:42,427 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-24 07:25:42,433 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-24 07:25:42,434 [printer.py:reinit()] - # Extruders: 1
2023-11-24 07:25:42,434 [printer.py:reinit()] - # Temperature devices: 4
2023-11-24 07:25:42,434 [printer.py:reinit()] - # Fans: 3
2023-11-24 07:25:42,434 [printer.py:reinit()] - # Output pins: 1
2023-11-24 07:25:42,434 [printer.py:reinit()] - # Leds: 1
2023-11-24 07:25:42,445 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-24 07:25:42,446 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-24 07:25:42,722 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-24 07:25:42,733 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-24 07:25:42,748 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-24 07:25:42,757 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-24 07:25:42,758 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-24 07:25:42,758 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-24 07:25:42,759 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-24 07:25:42,760 [screen.py:init_printer()] - Printer initialized
2023-11-24 07:25:42,760 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-24 07:25:42,760 [printer.py:change_state()] - Adding callback for state: ready
2023-11-24 07:25:42,764 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-24 07:25:42,833 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-24 07:25:42,841 [main_menu.py:add_device()] - Adding device: extruder
2023-11-24 07:25:42,848 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-24 07:25:42,855 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-24 07:25:42,860 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-24 07:25:42,865 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-24 07:25:42,902 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-24 07:26:46,192 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-24 07:26:46,192 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-24 07:26:46,194 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-24 07:26:46,199 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 07:26:46,273 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-24 07:26:49,639 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:26:49,647 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-24 07:26:49,647 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'timelapse', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-24 07:26:49,654 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-24 07:26:49,655 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-24 07:26:49,663 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-24 07:26:49,728 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-24 07:26:49,731 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '45'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019687, 0.012500, 0.010312\n0.043437, 0.033750, -0.013750\n0.049687, 0.007500, -0.004063', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '129.96', 'max_x': '168.1', 'min_y': '139.89', 'max_y': '159.2'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019687, 0.0125, 0.010312], [0.043437, 0.03375, -0.01375], [0.049687, 0.0075, -0.004063]], 'min_x': 129.96, 'max_x': 168.1, 'min_y': 139.89, 'max_y': 159.2, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 45.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-24 07:26:49,735 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0-dirty
2023-11-24 07:26:49,735 [printer.py:reinit()] - # Extruders: 1
2023-11-24 07:26:49,735 [printer.py:reinit()] - # Temperature devices: 4
2023-11-24 07:26:49,735 [printer.py:reinit()] - # Fans: 3
2023-11-24 07:26:49,736 [printer.py:reinit()] - # Output pins: 1
2023-11-24 07:26:49,736 [printer.py:reinit()] - # Leds: 1
2023-11-24 07:26:49,747 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-24 07:26:49,749 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-24 07:26:50,057 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-24 07:26:50,083 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-24 07:26:50,128 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-24 07:26:50,150 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-24 07:26:50,152 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-24 07:26:50,153 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-24 07:26:50,153 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-24 07:26:50,154 [screen.py:init_printer()] - Printer initialized
2023-11-24 07:26:50,155 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-24 07:26:50,155 [printer.py:change_state()] - Adding callback for state: ready
2023-11-24 07:26:50,163 [screen.py:show_panel()] - Reinitializing panel
2023-11-24 07:26:50,326 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-24 07:26:50,348 [main_menu.py:add_device()] - Adding device: extruder
2023-11-24 07:26:50,361 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-24 07:26:50,374 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-24 07:26:50,386 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-24 07:26:50,398 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-24 07:26:50,499 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-24 07:29:12,286 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=1028, height=768)
2023-11-24 07:29:14,010 [base_panel.py:process_update()] - Update complete
