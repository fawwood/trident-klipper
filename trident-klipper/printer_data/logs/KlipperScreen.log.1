2023-11-23 10:31:42,484 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '42'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '.2', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 42.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 0.2, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 10:31:42,489 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 10:31:42,489 [printer.py:reinit()] - # Extruders: 1
2023-11-23 10:31:42,489 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 10:31:42,489 [printer.py:reinit()] - # Fans: 3
2023-11-23 10:31:42,489 [printer.py:reinit()] - # Output pins: 1
2023-11-23 10:31:42,489 [printer.py:reinit()] - # Leds: 1
2023-11-23 10:31:42,491 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-23 10:31:42,491 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-23 10:31:42,491 [functions.py:log_start()] - Python version: 3.9
2023-11-23 10:31:42,503 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 10:31:42,505 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 10:31:42,734 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 10:31:42,755 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 10:31:42,761 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 10:31:42,769 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 10:31:42,770 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 10:31:42,770 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 10:31:42,770 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 10:31:42,771 [screen.py:init_printer()] - Printer initialized
2023-11-23 10:31:42,771 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 10:31:42,771 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 10:31:42,775 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:31:42,838 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 10:31:42,846 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 10:31:42,853 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 10:31:42,861 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 10:31:42,867 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 10:31:42,874 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 10:31:42,914 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 10:35:33,360 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 10:35:33,361 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 10:35:33,363 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 10:35:33,365 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:35:33,414 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 10:35:36,253 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:35:36,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:35:36,263 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'timelapse', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 10:35:36,271 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 10:35:36,272 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 10:35:36,281 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 10:35:36,303 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 10:35:36,307 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '.2', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 0.2, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 10:35:36,311 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 10:35:36,311 [printer.py:reinit()] - # Extruders: 1
2023-11-23 10:35:36,311 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 10:35:36,311 [printer.py:reinit()] - # Fans: 3
2023-11-23 10:35:36,312 [printer.py:reinit()] - # Output pins: 1
2023-11-23 10:35:36,312 [printer.py:reinit()] - # Leds: 1
2023-11-23 10:35:36,325 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 10:35:36,326 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 10:35:36,597 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 10:35:36,619 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 10:35:36,623 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 10:35:36,632 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 10:35:36,633 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 10:35:36,633 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 10:35:36,633 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 10:35:36,634 [screen.py:init_printer()] - Printer initialized
2023-11-23 10:35:36,634 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 10:35:36,634 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 10:35:36,637 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:35:36,697 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 10:35:36,704 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 10:35:36,710 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 10:35:36,716 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 10:35:36,721 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 10:35:36,726 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 10:35:36,763 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 10:38:47,096 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 10:38:47,096 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 10:38:47,097 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 10:38:47,102 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:38:47,190 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 10:38:50,250 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:38:50,257 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:38:50,258 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'timelapse', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 10:38:50,265 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 10:38:50,265 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 10:38:50,274 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 10:38:50,292 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 10:38:50,294 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '.4', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 0.4, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 10:38:50,298 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 10:38:50,299 [printer.py:reinit()] - # Extruders: 1
2023-11-23 10:38:50,299 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 10:38:50,299 [printer.py:reinit()] - # Fans: 3
2023-11-23 10:38:50,299 [printer.py:reinit()] - # Output pins: 1
2023-11-23 10:38:50,299 [printer.py:reinit()] - # Leds: 1
2023-11-23 10:38:50,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 10:38:50,311 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 10:38:50,584 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 10:38:50,604 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 10:38:50,609 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 10:38:50,617 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 10:38:50,618 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 10:38:50,618 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 10:38:50,618 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 10:38:50,619 [screen.py:init_printer()] - Printer initialized
2023-11-23 10:38:50,619 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 10:38:50,620 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 10:38:50,623 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:38:50,682 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 10:38:50,690 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 10:38:50,695 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 10:38:50,701 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 10:38:50,706 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 10:38:50,712 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 10:38:50,750 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 10:39:48,004 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 10:39:48,005 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 10:39:48,007 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 10:39:48,011 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:39:48,080 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 10:39:51,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:39:51,260 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:39:51,262 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'timelapse', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 10:39:51,269 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 10:39:51,270 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 10:39:51,279 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 10:39:51,540 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 10:39:51,543 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '3', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 3.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 10:39:51,548 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 10:39:51,548 [printer.py:reinit()] - # Extruders: 1
2023-11-23 10:39:51,548 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 10:39:51,548 [printer.py:reinit()] - # Fans: 3
2023-11-23 10:39:51,548 [printer.py:reinit()] - # Output pins: 1
2023-11-23 10:39:51,548 [printer.py:reinit()] - # Leds: 1
2023-11-23 10:39:51,559 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 10:39:51,560 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 10:39:51,805 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 10:39:51,852 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 10:39:51,857 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 10:39:51,867 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 10:39:51,868 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 10:39:51,868 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 10:39:51,868 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 10:39:51,869 [screen.py:init_printer()] - Printer initialized
2023-11-23 10:39:51,869 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 10:39:51,869 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 10:39:51,873 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:39:52,025 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 10:39:52,049 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 10:39:52,068 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 10:39:52,083 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 10:39:52,098 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 10:39:52,111 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 10:39:52,213 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 10:41:05,724 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 10:41:05,724 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 10:41:05,724 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 10:41:05,727 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:41:05,766 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 10:41:09,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:41:09,260 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:41:09,261 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'timelapse', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 10:41:09,268 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 10:41:09,269 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 10:41:09,278 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 10:41:09,356 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 10:41:09,359 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '2', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 2.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 10:41:09,364 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 10:41:09,364 [printer.py:reinit()] - # Extruders: 1
2023-11-23 10:41:09,364 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 10:41:09,364 [printer.py:reinit()] - # Fans: 3
2023-11-23 10:41:09,364 [printer.py:reinit()] - # Output pins: 1
2023-11-23 10:41:09,364 [printer.py:reinit()] - # Leds: 1
2023-11-23 10:41:09,376 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 10:41:09,378 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 10:41:09,657 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 10:41:09,679 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 10:41:09,685 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 10:41:09,693 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 10:41:09,694 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 10:41:09,694 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 10:41:09,694 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 10:41:09,695 [screen.py:init_printer()] - Printer initialized
2023-11-23 10:41:09,696 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 10:41:09,696 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 10:41:09,698 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:41:09,768 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 10:41:09,776 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 10:41:09,781 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 10:41:09,787 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 10:41:09,792 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 10:41:09,797 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 10:41:09,832 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 10:41:52,074 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 10:41:52,074 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 10:41:52,075 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 10:41:52,079 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:41:52,158 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 10:41:55,251 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:41:55,260 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 10:41:55,260 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'timelapse', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 10:41:55,268 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 10:41:55,269 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 10:41:55,277 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 10:41:55,296 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 10:41:55,299 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 10:41:55,303 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 10:41:55,303 [printer.py:reinit()] - # Extruders: 1
2023-11-23 10:41:55,303 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 10:41:55,304 [printer.py:reinit()] - # Fans: 3
2023-11-23 10:41:55,304 [printer.py:reinit()] - # Output pins: 1
2023-11-23 10:41:55,304 [printer.py:reinit()] - # Leds: 1
2023-11-23 10:41:55,316 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 10:41:55,317 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 10:41:55,591 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 10:41:55,611 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 10:41:55,615 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 10:41:55,624 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 10:41:55,625 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 10:41:55,626 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 10:41:55,626 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 10:41:55,627 [screen.py:init_printer()] - Printer initialized
2023-11-23 10:41:55,628 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 10:41:55,628 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 10:41:55,631 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 10:41:55,690 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 10:41:55,698 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 10:41:55,703 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 10:41:55,709 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 10:41:55,715 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 10:41:55,720 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 10:41:55,756 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 11:03:55,946 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 11:03:55,947 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 11:03:55,948 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 11:03:55,953 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 11:03:56,027 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 11:03:59,251 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 11:03:59,259 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 11:03:59,260 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'timelapse', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 11:03:59,267 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 11:03:59,268 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 11:03:59,277 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 11:03:59,549 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 11:03:59,552 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 11:03:59,556 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 11:03:59,556 [printer.py:reinit()] - # Extruders: 1
2023-11-23 11:03:59,556 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 11:03:59,556 [printer.py:reinit()] - # Fans: 3
2023-11-23 11:03:59,556 [printer.py:reinit()] - # Output pins: 1
2023-11-23 11:03:59,556 [printer.py:reinit()] - # Leds: 1
2023-11-23 11:03:59,567 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 11:03:59,569 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 11:03:59,849 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 11:03:59,870 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 11:03:59,874 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 11:03:59,882 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 11:03:59,883 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 11:03:59,883 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 11:03:59,883 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 11:03:59,884 [screen.py:init_printer()] - Printer initialized
2023-11-23 11:03:59,884 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 11:03:59,884 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 11:03:59,887 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 11:03:59,949 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 11:03:59,958 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 11:03:59,964 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 11:03:59,969 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 11:03:59,974 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 11:03:59,979 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 11:04:00,015 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 11:04:09,244 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 12:38:05,054 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 12:38:05,054 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 12:38:05,055 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-23 12:38:05,059 [screen.py:wake_screen()] - Screen wake up
2023-11-23 12:38:05,068 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:38:05,130 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:38:05,138 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 12:38:05,139 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:38:05,187 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:38:05,200 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:38:05,208 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 12:38:15,248 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:38:15,270 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:38:15,288 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 12:38:15,291 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 12:38:15,307 [_logging.py:info()] - Websocket connected
2023-11-23 12:38:15,307 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 12:38:15,325 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:38:15,332 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:38:15,333 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 12:38:15,340 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 12:38:15,341 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 12:38:15,350 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 12:38:15,388 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 12:38:15,391 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 12:38:15,394 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 12:38:15,394 [printer.py:reinit()] - # Extruders: 1
2023-11-23 12:38:15,394 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 12:38:15,394 [printer.py:reinit()] - # Fans: 3
2023-11-23 12:38:15,394 [printer.py:reinit()] - # Output pins: 1
2023-11-23 12:38:15,394 [printer.py:reinit()] - # Leds: 1
2023-11-23 12:38:15,404 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 12:38:15,406 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 12:38:15,671 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 12:38:15,682 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 12:38:15,697 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 12:38:15,706 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 12:38:15,706 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 12:38:15,707 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 12:38:15,707 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 12:38:15,707 [screen.py:init_printer()] - Printer initialized
2023-11-23 12:38:15,708 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 12:38:15,708 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 12:38:15,711 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:38:15,770 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 12:38:15,776 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 12:38:15,782 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 12:38:15,787 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 12:38:15,792 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 12:38:15,797 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 12:38:15,832 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 12:47:31,470 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 12:47:31,471 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 12:47:31,474 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:47:31,544 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:47:31,554 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 12:47:31,556 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:47:31,620 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:47:31,635 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:47:31,641 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 12:47:42,248 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:47:42,264 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:47:42,280 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 12:47:42,282 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 12:47:42,294 [_logging.py:info()] - Websocket connected
2023-11-23 12:47:42,295 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 12:47:42,313 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:47:42,325 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:47:42,326 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 12:47:42,333 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 12:47:42,333 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 12:47:42,342 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 12:47:42,469 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 12:47:42,471 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 12:47:42,474 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 12:47:42,475 [printer.py:reinit()] - # Extruders: 1
2023-11-23 12:47:42,475 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 12:47:42,475 [printer.py:reinit()] - # Fans: 3
2023-11-23 12:47:42,475 [printer.py:reinit()] - # Output pins: 1
2023-11-23 12:47:42,475 [printer.py:reinit()] - # Leds: 1
2023-11-23 12:47:42,485 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 12:47:42,486 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 12:47:42,752 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 12:47:42,761 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 12:47:42,776 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 12:47:42,785 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 12:47:42,785 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 12:47:42,786 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 12:47:42,786 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 12:47:42,786 [screen.py:init_printer()] - Printer initialized
2023-11-23 12:47:42,787 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 12:47:42,787 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 12:47:42,790 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:47:42,848 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 12:47:42,855 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 12:47:42,860 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 12:47:42,866 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 12:47:42,871 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 12:47:42,875 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 12:47:42,910 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 12:51:42,479 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 12:51:42,480 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 12:51:42,483 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:51:42,580 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:51:42,593 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 12:51:42,594 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:51:42,643 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:51:42,650 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:51:42,654 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 12:51:53,245 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:51:53,254 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:51:53,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 12:51:53,263 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 12:51:53,268 [_logging.py:info()] - Websocket connected
2023-11-23 12:51:53,269 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 12:51:53,276 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:51:53,284 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:51:53,284 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unparsed config option 'output_path: ~/printer_data/timelapse/' detected in section [history].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.", "Unparsed config option 'frame_path: /tmp/timelapse/printer' detected in section [history].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error."], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 12:51:53,286 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unparsed config option 'output_path:
 ~/printer_data/timelapse/' detected in section [history].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.
Unparsed config option 'frame_path:
 /tmp/timelapse/printer' detected in section [history].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.

2023-11-23 12:51:53,308 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 12:51:53,310 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 12:51:53,318 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 12:51:53,589 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 12:51:53,597 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 12:51:53,606 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 12:51:53,606 [printer.py:reinit()] - # Extruders: 1
2023-11-23 12:51:53,607 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 12:51:53,607 [printer.py:reinit()] - # Fans: 3
2023-11-23 12:51:53,607 [printer.py:reinit()] - # Output pins: 1
2023-11-23 12:51:53,607 [printer.py:reinit()] - # Leds: 1
2023-11-23 12:51:53,630 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 12:51:53,632 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 12:51:53,841 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 12:51:53,851 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 12:51:53,867 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 12:51:53,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 12:51:53,877 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 12:51:53,877 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 12:51:53,877 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 12:51:53,877 [screen.py:init_printer()] - Printer initialized
2023-11-23 12:51:53,878 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 12:51:53,878 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 12:51:53,975 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:51:54,034 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 12:51:54,041 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 12:51:54,047 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 12:51:54,053 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 12:51:54,058 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 12:51:54,064 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 12:51:54,099 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 12:53:18,290 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 12:53:18,290 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 12:53:18,292 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:53:18,360 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:53:18,369 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 12:53:18,370 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:53:18,415 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:53:18,422 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:53:18,427 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 12:53:28,247 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:53:28,263 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:53:28,277 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 12:53:28,278 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 12:53:28,291 [_logging.py:info()] - Websocket connected
2023-11-23 12:53:28,291 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 12:53:28,307 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:53:28,321 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:53:28,323 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'timelapse', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 12:53:28,335 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 12:53:28,335 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 12:53:28,347 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 12:53:28,503 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 12:53:28,508 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 12:53:28,515 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 12:53:28,515 [printer.py:reinit()] - # Extruders: 1
2023-11-23 12:53:28,515 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 12:53:28,515 [printer.py:reinit()] - # Fans: 3
2023-11-23 12:53:28,515 [printer.py:reinit()] - # Output pins: 1
2023-11-23 12:53:28,515 [printer.py:reinit()] - # Leds: 1
2023-11-23 12:53:28,530 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 12:53:28,532 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 12:53:28,828 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 12:53:28,849 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 12:53:28,864 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 12:53:28,872 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 12:53:28,873 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 12:53:28,873 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 12:53:28,873 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 12:53:28,873 [screen.py:init_printer()] - Printer initialized
2023-11-23 12:53:28,874 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 12:53:28,874 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 12:53:28,876 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:53:28,938 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 12:53:28,945 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 12:53:28,950 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 12:53:28,956 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 12:53:28,962 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 12:53:28,967 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 12:53:29,003 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 12:58:43,549 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 12:58:43,549 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 12:58:43,551 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:58:43,616 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:58:43,627 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 12:58:43,628 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:58:43,673 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 12:58:43,680 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:58:43,684 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 12:58:54,247 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 12:58:54,265 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:58:54,280 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 12:58:54,281 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 12:58:54,292 [_logging.py:info()] - Websocket connected
2023-11-23 12:58:54,293 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 12:58:54,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:58:54,324 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 12:58:54,325 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'timelapse', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 12:58:54,338 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 12:58:54,340 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 12:58:54,356 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 12:58:54,476 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 12:58:54,480 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 12:58:54,483 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 12:58:54,483 [printer.py:reinit()] - # Extruders: 1
2023-11-23 12:58:54,483 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 12:58:54,484 [printer.py:reinit()] - # Fans: 3
2023-11-23 12:58:54,484 [printer.py:reinit()] - # Output pins: 1
2023-11-23 12:58:54,484 [printer.py:reinit()] - # Leds: 1
2023-11-23 12:58:54,494 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 12:58:54,495 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 12:58:54,766 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 12:58:54,776 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 12:58:54,791 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 12:58:54,800 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 12:58:54,800 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 12:58:54,801 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 12:58:54,801 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 12:58:54,801 [screen.py:init_printer()] - Printer initialized
2023-11-23 12:58:54,802 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 12:58:54,802 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 12:58:54,804 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 12:58:54,863 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 12:58:54,870 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 12:58:54,875 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 12:58:54,881 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 12:58:54,886 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 12:58:54,891 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 12:58:54,925 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 12:59:08,757 [screen.py:show_popup_message()] - error: // Unknown command:"_SET_TIMELAPSE_SETUP"
2023-11-23 13:04:38,113 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 13:04:38,114 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 13:04:38,116 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:04:38,239 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:04:38,248 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:04:38,249 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:04:38,290 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:04:38,297 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:04:38,301 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:04:48,247 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:04:48,267 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:04:48,283 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:04:48,285 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:04:48,296 [_logging.py:info()] - Websocket connected
2023-11-23 13:04:48,297 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:04:48,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:04:48,324 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:04:48,325 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'timelapse', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:04:48,338 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:04:48,339 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:04:48,354 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:04:48,530 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:04:48,533 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:04:48,536 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:04:48,536 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:04:48,536 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:04:48,536 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:04:48,537 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:04:48,537 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:04:48,547 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:04:48,548 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:04:48,815 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:04:48,825 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:04:48,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:04:48,849 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:04:48,850 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:04:48,850 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:04:48,850 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:04:48,851 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:04:48,851 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:04:48,851 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:04:48,856 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:04:48,914 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:04:48,920 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:04:48,926 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:04:48,931 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:04:48,936 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:04:48,941 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:04:48,976 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:06:21,863 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 13:06:21,864 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 13:06:21,866 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:06:21,939 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:06:21,948 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:06:21,949 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:06:21,991 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:06:21,999 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:06:22,002 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:06:32,247 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:06:32,266 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:06:32,285 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:06:32,288 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:06:32,302 [_logging.py:info()] - Websocket connected
2023-11-23 13:06:32,302 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:06:32,320 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:06:32,328 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:06:32,329 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'timelapse', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:06:32,336 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:06:32,337 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:06:32,345 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:06:32,476 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:06:32,479 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:06:32,482 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:06:32,482 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:06:32,482 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:06:32,482 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:06:32,482 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:06:32,482 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:06:32,493 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:06:32,494 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:06:32,764 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:06:32,774 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:06:32,789 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:06:32,798 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:06:32,799 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:06:32,800 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:06:32,800 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:06:32,801 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:06:32,802 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:06:32,802 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:06:32,804 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:06:32,864 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:06:32,871 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:06:32,876 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:06:32,882 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:06:32,887 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:06:32,892 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:06:32,929 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:06:56,234 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=1028, height=768)
2023-11-23 13:06:58,556 [base_panel.py:process_update()] - Update complete
2023-11-23 13:06:58,557 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 13:06:58,558 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 13:06:58,577 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 13:06:58,581 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:06:58,637 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:06:58,706 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 13:06:58,707 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 13:06:58,711 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:06:58,776 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:06:58,788 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:06:58,789 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:06:58,851 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:06:58,867 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:06:58,874 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:07:02,248 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:07:02,249 [screen.py:init_printer()] - Moonraker not connected
2023-11-23 13:07:09,245 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:07:09,254 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:07:09,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:07:09,263 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:07:09,269 [_logging.py:info()] - Websocket connected
2023-11-23 13:07:09,269 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:07:09,277 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:07:09,284 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:07:09,285 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:07:09,292 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:07:09,293 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:07:09,301 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:07:09,453 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:07:09,456 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:07:09,460 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:07:09,460 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:07:09,460 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:07:09,460 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:07:09,460 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:07:09,460 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:07:09,471 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:07:09,473 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:07:09,755 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:07:09,765 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:07:09,780 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:07:09,789 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:07:09,790 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:07:09,790 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:07:09,790 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:07:09,791 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:07:09,792 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:07:09,792 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:07:09,795 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:07:09,856 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:07:09,864 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:07:09,869 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:07:09,875 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:07:09,880 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:07:09,885 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:07:09,921 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:07:31,505 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 13:07:31,505 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 13:07:31,508 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:07:31,579 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:07:31,588 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:07:31,589 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:07:31,632 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:07:31,640 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:07:31,644 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:07:42,247 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:07:42,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:07:42,278 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:07:42,279 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:07:42,293 [_logging.py:info()] - Websocket connected
2023-11-23 13:07:42,293 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:07:42,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:07:42,326 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:07:42,327 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:07:42,342 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:07:42,344 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:07:42,360 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:07:42,590 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:07:42,593 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:07:42,596 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:07:42,597 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:07:42,597 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:07:42,597 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:07:42,597 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:07:42,597 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:07:42,608 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:07:42,610 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:07:42,893 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:07:42,904 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:07:42,919 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:07:42,928 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:07:42,928 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:07:42,929 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:07:42,929 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:07:42,929 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:07:42,930 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:07:42,930 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:07:42,932 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:07:42,992 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:07:42,999 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:07:43,005 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:07:43,010 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:07:43,015 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:07:43,020 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:07:43,056 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:10:46,007 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 13:10:46,007 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 13:10:46,010 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:10:46,098 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:10:46,107 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:10:46,108 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:10:46,153 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:10:46,161 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:10:46,165 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:10:56,245 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:10:56,253 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:10:56,260 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:10:56,262 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:10:56,267 [_logging.py:info()] - Websocket connected
2023-11-23 13:10:56,268 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:10:56,276 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:10:56,284 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:10:56,285 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': ['[update_manager]: Failed to load extension fluidd-config: Invalid path for option `path` in section [update_manager fluidd-config]: Path `/home/pi/fluidd-config` does not exist', "Unparsed config option 'primary_branch: master' detected in section [update_manager fluidd-config].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.", "Unparsed config option 'origin: https://github.com/fluidd-core/fluidd-config.git' detected in section [update_manager fluidd-config].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error."], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:10:56,286 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
[update_manager]:
 Failed to load extension fluidd-config:
 Invalid path for option `path` in section [update_manager fluidd-config]:
 Path `/home/pi/fluidd-config` does not exist
Unparsed config option 'primary_branch:
 master' detected in section [update_manager fluidd-config].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.
Unparsed config option 'origin:
 https:
//github.com/fluidd-core/fluidd-config.git' detected in section [update_manager fluidd-config].  This may be an option no longer available or could be the result of a module that failed to load.  In the future this will result in a startup error.

2023-11-23 13:10:56,309 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:10:56,309 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:10:56,319 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:10:56,376 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:10:56,380 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:10:56,384 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:10:56,384 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:10:56,384 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:10:56,384 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:10:56,384 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:10:56,384 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:10:56,393 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:10:56,395 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:10:56,683 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:10:56,694 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:10:56,710 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:10:56,719 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:10:56,720 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:10:56,720 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:10:56,720 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:10:56,721 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:10:56,722 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:10:56,722 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:10:56,837 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:10:56,949 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:10:56,957 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:10:56,963 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:10:56,968 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:10:56,973 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:10:56,978 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:10:57,016 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:12:15,368 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 13:12:15,369 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 13:12:15,372 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:12:15,438 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:12:15,447 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:12:15,448 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:12:15,493 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:12:15,500 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:12:15,504 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:12:26,248 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:12:26,264 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:12:26,280 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:12:26,282 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:12:26,294 [_logging.py:info()] - Websocket connected
2023-11-23 13:12:26,295 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:12:26,313 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:12:26,329 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:12:26,330 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:12:26,346 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:12:26,347 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:12:26,361 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:12:26,418 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:12:26,424 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:12:26,428 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:12:26,428 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:12:26,428 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:12:26,428 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:12:26,428 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:12:26,428 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:12:26,442 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:12:26,443 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:12:26,722 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:12:26,732 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:12:26,747 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:12:26,757 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:12:26,758 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:12:26,759 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:12:26,759 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:12:26,760 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:12:26,761 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:12:26,761 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:12:26,765 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:12:26,830 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:12:26,840 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:12:26,847 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:12:26,854 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:12:26,861 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:12:26,867 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:12:26,904 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:13:08,938 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 13:13:08,941 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 13:13:08,943 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:13:09,058 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:13:09,069 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:13:09,070 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:13:09,111 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:13:09,119 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:13:09,123 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:13:19,247 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:13:19,263 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:13:19,278 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:13:19,280 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:13:19,292 [_logging.py:info()] - Websocket connected
2023-11-23 13:13:19,292 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:13:19,307 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:13:19,322 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:13:19,324 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:13:19,342 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:13:19,344 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:13:19,366 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:13:19,607 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:13:19,611 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:13:19,615 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:13:19,615 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:13:19,615 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:13:19,615 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:13:19,615 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:13:19,615 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:13:19,627 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:13:19,629 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:13:19,910 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:13:19,921 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:13:19,936 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:13:19,944 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:13:19,945 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:13:19,945 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:13:19,945 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:13:19,946 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:13:19,946 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:13:19,946 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:13:19,949 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:13:20,009 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:13:20,017 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:13:20,022 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:13:20,028 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:13:20,033 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:13:20,038 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:13:20,078 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:15:03,798 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-11-23 13:15:03,799 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-11-23 13:15:03,802 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:15:03,921 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:15:03,930 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:15:03,931 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:15:03,972 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:15:03,979 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:15:03,983 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-23 13:15:14,248 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:15:14,264 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:15:14,279 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:15:14,281 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:15:14,294 [_logging.py:info()] - Websocket connected
2023-11-23 13:15:14,295 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:15:14,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:15:14,324 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:15:14,325 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:15:14,335 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:15:14,336 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:15:14,347 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:15:14,429 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:15:14,435 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:15:14,443 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:15:14,443 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:15:14,443 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:15:14,443 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:15:14,443 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:15:14,444 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:15:14,459 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:15:14,462 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:15:14,781 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:15:14,814 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:15:14,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:15:14,850 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:15:14,851 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:15:14,852 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:15:14,852 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:15:14,853 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:15:14,854 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:15:14,854 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:15:14,858 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:15:14,925 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:15:14,932 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:15:14,938 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:15:14,943 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:15:14,948 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:15:14,953 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:15:14,988 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:36:15,958 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 13:36:15,958 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 13:36:15,959 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 13:36:15,962 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:36:16,001 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:36:19,265 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:36:19,283 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:36:19,284 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:36:19,303 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:36:19,304 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:36:19,585 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:36:19,607 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:36:19,610 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:36:19,614 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:36:19,614 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:36:19,614 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:36:19,614 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:36:19,614 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:36:19,614 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:36:19,626 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:36:19,627 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:36:19,902 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:36:19,923 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:36:19,928 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:36:19,936 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:36:19,937 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:36:19,937 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:36:19,937 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:36:19,938 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:36:19,938 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-23 13:36:19,938 [printer.py:change_state()] - Adding callback for state: startup
2023-11-23 13:36:20,288 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2023-11-23 13:36:20,288 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 13:36:20,289 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 13:36:20,290 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:36:20,347 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:36:23,251 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:36:23,260 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:36:23,261 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:36:23,270 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:36:23,270 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:36:23,280 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:36:23,299 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:36:23,302 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:36:23,307 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:36:23,307 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:36:23,307 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:36:23,307 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:36:23,307 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:36:23,307 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:36:23,323 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:36:23,326 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:36:23,599 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:36:23,621 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:36:23,626 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:36:23,634 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:36:23,636 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:36:23,636 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:36:23,636 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:36:23,637 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:36:23,638 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:36:23,638 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:36:23,641 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 13:36:23,702 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:36:23,709 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:36:23,715 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:36:23,720 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:36:23,726 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:36:23,731 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:36:23,768 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 13:38:05,246 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 13:38:05,246 [screen.py:show_screensaver()] - Hiding dialog
2023-11-23 13:43:39,147 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2023-11-23 13:43:39,148 [functions.py:log_start()] - KlipperScreen Version: v0.3.6-88-g6eefe9d
2023-11-23 13:43:39,148 [functions.py:log_start()] - Python version: 3.9
2023-11-23 13:43:39,310 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-11-23 13:43:39,313 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-11-23 13:43:39,325 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-23 13:43:39,405 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-11-23 13:43:39,405 [config.py:install_language()] - Using system lang
2023-11-23 13:43:39,405 [config.py:install_language()] - Using lang en
2023-11-23 13:43:39,419 [screen.py:__init__()] - Screen resolution: 1024x768
2023-11-23 13:43:39,420 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-11-23 13:43:40,070 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-23 13:43:40,078 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-23 13:43:40,084 [screen.py:initial_connection()] - Default printer: None
2023-11-23 13:43:40,084 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-23 13:43:40,085 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-23 13:43:40,130 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 13:43:40,136 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-23 13:43:40,150 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:43:40,159 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-23 13:43:40,159 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-23 13:43:40,166 [_logging.py:info()] - Websocket connected
2023-11-23 13:43:40,167 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-23 13:43:40,278 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:43:40,289 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:43:40,291 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:43:40,301 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:43:40,302 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:43:40,325 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-11-23 13:43:41,109 [screen.py:_websocket_callback()] - Still not initialized
2023-11-23 13:43:43,208 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:43:43,216 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 13:43:43,217 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 13:43:43,224 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 13:43:43,225 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 13:43:43,233 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 13:43:43,364 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 13:43:43,366 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 13:43:43,370 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 13:43:43,370 [printer.py:reinit()] - # Extruders: 1
2023-11-23 13:43:43,370 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 13:43:43,370 [printer.py:reinit()] - # Fans: 3
2023-11-23 13:43:43,371 [printer.py:reinit()] - # Output pins: 1
2023-11-23 13:43:43,371 [printer.py:reinit()] - # Leds: 1
2023-11-23 13:43:43,381 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 13:43:43,382 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 13:43:43,673 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 13:43:43,683 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 13:43:43,698 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 13:43:43,707 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 13:43:43,707 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 13:43:43,708 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 13:43:43,708 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 13:43:43,708 [screen.py:init_printer()] - Printer initialized
2023-11-23 13:43:43,709 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 13:43:43,709 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 13:43:43,711 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-23 13:43:43,783 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 13:43:43,791 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 13:43:43,797 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 13:43:43,804 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 13:43:43,809 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 13:43:43,814 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 13:43:43,852 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 14:01:04,419 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m13s-300x300.png. Retrying in 6 seconds
2023-11-23 14:01:04,420 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m13s-32x32.png. Retrying in 6 seconds
2023-11-23 14:01:26,729 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 14:01:26,729 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 14:01:26,740 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-23 14:01:26,895 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 14:01:26,900 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 14:01:26,910 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m13s.gcode Size: 3230595
2023-11-23 14:01:26,922 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m13s.gcode
2023-11-23 14:20:19,949 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:20:20,031 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:20:20,145 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 14:20:22,640 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 14:20:22,640 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 14:21:03,264 [screen.py:_load_panel()] - Loading panel: zcalibrate
2023-11-23 14:21:03,288 [printer.py:get_probe()] - Probe type: probe
2023-11-23 14:21:03,288 [zcalibrate.py:__init__()] - Z offset: -0.4
2023-11-23 14:21:03,331 [zcalibrate.py:__init__()] - Available functions for calibration: ['probe']
2023-11-23 14:21:03,367 [screen.py:attach_panel()] - Current panel hierarchy: job_status > zcalibrate
2023-11-23 14:22:01,695 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 14:22:01,696 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 14:22:01,714 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 14:22:01,875 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 14:22:01,881 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 14:22:01,889 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m13s.gcode Size: 3230595
2023-11-23 14:22:01,897 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m13s.gcode
2023-11-23 14:27:40,037 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:27:40,151 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:27:40,166 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:27:40,231 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 14:27:43,916 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 14:27:43,916 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 14:28:08,991 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 14:28:08,992 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 14:28:08,998 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-11-23 14:28:09,027 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 14:28:09,146 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 14:28:09,151 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 14:28:09,157 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m13s.gcode Size: 3230595
2023-11-23 14:28:09,165 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m13s.gcode
2023-11-23 14:33:51,726 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:33:51,776 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:33:51,783 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:33:51,966 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 14:33:55,715 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 14:33:55,715 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 14:41:45,131 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'standby'
2023-11-23 14:43:55,084 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 14:45:17,975 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_cw1_pcb_cover_clip-on_mount-r1-64x64.png. Retrying in 6 seconds
2023-11-23 14:45:17,976 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_cw1_pcb_cover_clip-on_mount-r1-400x300.png. Retrying in 6 seconds
2023-11-23 14:45:17,977 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_cw1_pcb_cover_clip-on_mount-r1-32x32.png. Retrying in 6 seconds
2023-11-23 14:45:32,026 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-23 14:45:32,046 [screen.py:wake_screen()] - Screen wake up
2023-11-23 14:45:32,065 [screen.py:show_popup_message()] - error: // Unknown command:"M141"
2023-11-23 14:46:53,380 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 14:49:41,148 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 14:49:41,148 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 14:49:41,149 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 14:49:41,151 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 14:49:41,211 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 14:49:44,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 14:49:44,098 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 14:49:44,099 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 14:49:44,107 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 14:49:44,108 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 14:49:44,108 [screen.py:init_printer()] - Klipper not connected
2023-11-23 14:49:47,105 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 14:49:47,122 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 14:49:47,125 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 14:49:47,142 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 14:49:47,144 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 14:49:47,155 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 14:49:47,307 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 14:49:47,310 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 14:49:47,314 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 14:49:47,314 [printer.py:reinit()] - # Extruders: 1
2023-11-23 14:49:47,314 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 14:49:47,314 [printer.py:reinit()] - # Fans: 3
2023-11-23 14:49:47,315 [printer.py:reinit()] - # Output pins: 1
2023-11-23 14:49:47,315 [printer.py:reinit()] - # Leds: 1
2023-11-23 14:49:47,326 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 14:49:47,328 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 14:49:47,610 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 14:49:47,631 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 14:49:47,636 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 14:49:47,645 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 14:49:47,645 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 14:49:47,646 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 14:49:47,646 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 14:49:47,647 [screen.py:init_printer()] - Printer initialized
2023-11-23 14:49:47,647 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 14:49:47,648 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 14:49:47,652 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 14:49:47,713 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 14:49:47,721 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 14:49:47,726 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 14:49:47,731 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 14:49:47,736 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 14:49:47,742 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 14:49:47,778 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 14:50:09,758 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 14:54:32,466 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:54:32,560 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:54:32,568 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:54:57,273 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 14:56:38,832 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:56:38,926 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:56:38,934 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 14:59:00,952 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s-300x300.png. Retrying in 6 seconds
2023-11-23 14:59:00,955 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s-32x32.png. Retrying in 6 seconds
2023-11-23 14:59:01,119 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 14:59:01,119 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 14:59:01,129 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 14:59:01,251 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 14:59:01,256 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 14:59:01,263 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 14:59:01,271 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:03:40,966 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 15:03:41,042 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 15:03:41,051 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2023-11-23 15:03:41,152 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 15:03:44,649 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 15:03:44,650 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 15:04:17,742 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 15:04:17,743 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:04:17,751 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-11-23 15:04:17,795 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:04:17,926 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:04:17,931 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:04:17,938 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:04:17,946 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:05:43,076 [printer.py:change_state()] - Changing state from 'printing' to 'disconnected'
2023-11-23 15:05:43,076 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 15:05:43,077 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 15:05:43,080 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:05:43,140 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 15:05:46,090 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 15:05:46,098 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 15:05:46,099 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 15:05:46,106 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 15:05:46,107 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 15:05:46,115 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 15:05:46,238 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 15:05:46,241 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 15:05:46,246 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 15:05:46,246 [printer.py:reinit()] - # Extruders: 1
2023-11-23 15:05:46,246 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 15:05:46,246 [printer.py:reinit()] - # Fans: 3
2023-11-23 15:05:46,246 [printer.py:reinit()] - # Output pins: 1
2023-11-23 15:05:46,246 [printer.py:reinit()] - # Leds: 1
2023-11-23 15:05:46,258 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 15:05:46,260 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 15:05:46,550 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 15:05:46,572 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 15:05:46,577 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 15:05:46,586 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 15:05:46,587 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 15:05:46,587 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 15:05:46,588 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 15:05:46,589 [screen.py:init_printer()] - Printer initialized
2023-11-23 15:05:46,590 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 15:05:46,590 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 15:05:46,593 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:05:46,657 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 15:05:46,667 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 15:05:46,673 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 15:05:46,678 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 15:05:46,684 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 15:05:46,689 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 15:05:46,728 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 15:06:05,039 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 15:06:05,040 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:06:05,052 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:06:05,170 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:06:05,175 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:06:05,182 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:06:05,189 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:12:44,383 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:12:44,383 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:12:44,388 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:12:44,431 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:12:44,596 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:12:44,605 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:12:44,613 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:12:44,622 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:12:44,627 [screen.py:_load_panel()] - Loading panel: extrude
2023-11-23 15:12:44,698 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:12:44,886 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:12:44,886 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:12:44,890 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:12:45,008 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:12:45,013 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:12:45,020 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:12:45,028 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:13:06,457 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:13:06,457 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:13:06,466 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:13:06,516 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:06,653 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:13:06,658 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:13:06,665 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:13:06,673 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:13:06,678 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:06,741 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:13:06,954 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:13:06,955 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:13:06,958 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:07,082 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:13:07,087 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:13:07,094 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:13:07,102 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:13:28,279 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:13:28,279 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:13:28,286 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:13:28,331 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:28,462 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:13:28,466 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:13:28,473 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:13:28,481 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:13:28,486 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:28,544 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:13:28,804 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:13:28,804 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:13:28,811 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:28,922 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:13:28,928 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:13:28,935 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:13:28,944 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:13:47,105 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:13:47,105 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:13:47,111 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:13:47,176 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:47,296 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:13:47,300 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:13:47,307 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:13:47,315 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:13:47,319 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:47,380 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:13:47,625 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:13:47,625 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:13:47,633 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:13:47,753 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:13:47,758 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:13:47,764 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:13:47,772 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:14:06,432 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:14:06,432 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:14:06,444 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:14:06,498 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:06,617 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:14:06,622 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:14:06,629 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:14:06,637 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:14:06,641 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:06,701 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:14:06,930 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:14:06,931 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:14:06,938 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:07,071 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:14:07,075 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:14:07,083 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:14:07,092 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:14:25,257 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:14:25,258 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:14:25,261 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:14:25,289 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:25,409 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:14:25,414 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:14:25,422 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:14:25,430 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:14:25,435 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:25,493 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:14:25,759 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:14:25,760 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:14:25,767 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:25,883 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:14:25,888 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:14:25,895 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:14:25,903 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:14:48,816 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:14:48,817 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:14:48,824 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:14:48,880 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:49,022 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:14:49,027 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:14:49,034 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:14:49,042 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:14:49,047 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:49,111 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:14:49,317 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:14:49,318 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:14:49,321 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:14:49,436 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:14:49,442 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:14:49,450 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:14:49,459 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:15:10,420 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:15:10,421 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:15:10,430 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:15:10,495 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:10,624 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:15:10,631 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:15:10,640 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:15:10,649 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:15:10,654 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:10,713 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:15:10,926 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:15:10,926 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:15:10,929 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:11,047 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:15:11,052 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:15:11,059 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:15:11,067 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:15:32,775 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:15:32,775 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:15:32,785 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:15:32,844 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:32,972 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:15:32,977 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:15:32,984 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:15:32,992 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:15:32,996 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:33,053 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:15:33,310 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:15:33,310 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:15:33,317 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:33,429 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:15:33,434 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:15:33,441 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:15:33,449 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:15:57,404 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:15:57,404 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:15:57,411 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:15:57,455 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:57,600 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:15:57,604 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:15:57,611 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:15:57,619 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:15:57,623 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:57,683 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:15:57,903 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:15:57,903 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:15:57,906 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:15:58,016 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:15:58,020 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:15:58,027 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:15:58,035 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:16:12,994 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:16:12,995 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:16:13,001 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:16:13,050 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:13,195 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:16:13,201 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:16:13,211 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:16:13,223 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:16:13,228 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:13,298 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:16:13,505 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:16:13,506 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:16:13,509 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:13,648 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:16:13,652 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:16:13,660 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:16:13,668 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:16:28,294 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:16:28,294 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:16:28,299 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:16:28,341 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:28,482 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:16:28,487 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:16:28,496 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:16:28,505 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:16:28,509 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:28,572 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:16:28,793 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:16:28,793 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:16:28,800 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:28,914 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:16:28,919 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:16:28,926 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:16:28,934 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:16:42,833 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:16:42,833 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:16:42,839 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:16:42,891 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:43,034 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:16:43,039 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:16:43,046 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:16:43,054 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:16:43,058 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:43,118 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:16:43,333 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:16:43,333 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:16:43,342 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:43,455 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:16:43,460 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:16:43,467 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:16:43,476 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:16:56,881 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:16:56,881 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:16:56,897 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:16:56,953 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:57,093 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:16:57,098 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:16:57,106 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:16:57,114 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:16:57,118 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:57,178 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:16:57,406 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:16:57,406 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:16:57,415 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:16:57,537 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:16:57,543 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:16:57,551 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:16:57,560 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:17:10,953 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:17:10,954 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:17:10,962 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:17:11,020 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:11,160 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:17:11,164 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:17:11,172 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:17:11,180 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:17:11,185 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:11,252 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:17:11,450 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:17:11,450 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:17:11,456 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:11,570 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:17:11,575 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:17:11,583 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:17:11,590 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:17:24,486 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:17:24,486 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:17:24,493 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:17:24,544 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:24,688 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:17:24,693 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:17:24,700 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:17:24,708 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:17:24,712 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:24,773 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:17:24,985 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:17:24,985 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:17:24,987 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:25,101 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:17:25,106 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:17:25,113 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:17:25,121 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:17:38,530 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:17:38,531 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:17:38,538 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:17:38,594 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:38,751 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:17:38,755 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:17:38,762 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:17:38,771 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:17:38,778 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:38,846 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:17:39,028 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:17:39,028 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:17:39,031 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:39,152 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:17:39,156 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:17:39,163 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:17:39,171 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:17:53,064 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:17:53,064 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:17:53,068 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:17:53,142 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:53,274 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:17:53,278 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:17:53,285 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:17:53,293 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:17:53,297 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:53,362 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:17:53,566 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:17:53,566 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:17:53,569 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:17:53,682 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:17:53,686 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:17:53,693 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:17:53,701 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:18:07,394 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:18:07,394 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:18:07,403 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:18:07,449 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:07,575 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:18:07,579 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:18:07,586 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:18:07,594 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:18:07,599 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:07,659 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:18:07,897 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:18:07,897 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:18:07,904 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:08,025 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:18:08,031 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:18:08,039 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:18:08,048 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:18:23,698 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:18:23,698 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:18:23,706 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:18:23,762 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:23,887 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:18:23,891 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:18:23,898 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:18:23,906 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:18:23,911 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:23,980 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:18:24,202 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:18:24,203 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:18:24,206 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:24,325 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:18:24,330 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:18:24,340 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:18:24,348 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:18:39,500 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:18:39,501 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:18:39,515 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:18:39,577 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:39,704 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:18:39,709 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:18:39,716 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:18:39,724 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:18:39,729 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:39,786 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:18:40,006 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:18:40,006 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:18:40,019 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:40,138 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:18:40,143 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:18:40,150 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:18:40,158 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:18:55,297 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:18:55,297 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:18:55,304 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:18:55,356 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:55,501 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:18:55,506 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:18:55,513 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:18:55,521 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:18:55,526 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:55,587 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:18:55,798 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:18:55,799 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:18:55,803 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:18:55,920 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:18:55,925 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:18:55,932 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:18:55,940 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:19:11,094 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:19:11,094 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:19:11,100 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:19:11,146 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:11,304 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:19:11,309 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:19:11,317 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:19:11,325 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:19:11,330 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:11,397 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:19:11,589 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:19:11,589 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:19:11,592 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:11,705 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:19:11,710 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:19:11,718 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:19:11,726 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:19:26,882 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:19:26,882 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:19:26,888 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:19:26,934 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:27,093 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:19:27,098 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:19:27,105 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:19:27,113 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:19:27,118 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:27,177 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:19:27,380 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:19:27,381 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:19:27,383 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:27,503 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:19:27,508 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:19:27,515 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:19:27,523 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:19:42,186 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:19:42,186 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:19:42,197 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:19:42,258 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:42,396 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:19:42,400 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:19:42,408 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:19:42,416 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:19:42,422 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:42,483 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:19:42,729 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:19:42,729 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:19:42,737 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:42,855 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:19:42,860 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:19:42,867 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:19:42,876 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:19:57,767 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:19:57,768 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:19:57,771 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:19:57,800 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:57,913 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:19:57,918 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:19:57,925 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:19:57,933 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:19:57,937 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:57,995 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:19:58,269 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:19:58,270 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:19:58,275 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:19:58,390 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:19:58,395 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:19:58,403 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:19:58,411 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:20:12,845 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:20:12,845 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:20:12,850 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:20:12,897 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:13,033 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:20:13,038 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:20:13,045 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:20:13,053 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:20:13,058 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:13,121 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:20:13,343 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:20:13,343 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:20:13,352 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:13,465 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:20:13,471 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:20:13,478 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:20:13,487 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:20:27,644 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:20:27,645 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:20:27,655 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:20:27,723 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:27,859 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:20:27,864 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:20:27,871 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:20:27,879 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:20:27,883 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:27,942 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:20:28,145 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:20:28,145 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:20:28,149 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:28,267 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:20:28,272 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:20:28,279 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:20:28,288 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:20:41,952 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:20:41,953 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:20:41,962 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:20:42,028 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:42,149 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:20:42,154 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:20:42,162 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:20:42,170 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:20:42,175 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:42,252 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:20:42,448 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:20:42,448 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:20:42,451 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:42,564 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:20:42,570 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:20:42,577 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:20:42,585 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:20:55,252 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:20:55,252 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:20:55,256 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:20:55,294 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:55,421 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:20:55,426 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:20:55,433 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:20:55,441 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:20:55,446 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:55,519 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:20:55,817 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:20:55,817 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:20:55,826 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:20:55,939 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:20:55,944 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:20:55,952 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:20:55,964 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:08,917 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:21:08,917 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:21:08,924 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:21:08,955 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:09,070 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:09,075 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:21:09,082 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:09,090 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:09,095 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:09,153 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:21:09,420 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:21:09,421 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:21:09,431 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:09,576 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:09,581 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:21:09,588 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:09,596 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:21,951 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:21:21,951 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:21:21,954 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:21:21,982 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:22,093 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:22,098 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:21:22,105 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:22,113 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:22,117 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:22,177 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:21:22,452 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:21:22,453 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:21:22,460 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:22,614 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:22,624 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:21:22,643 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:22,657 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:34,483 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:21:34,483 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:21:34,491 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:21:34,534 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:34,667 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:34,672 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:21:34,679 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:34,687 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:34,691 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:34,750 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:21:34,981 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:21:34,981 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:21:34,988 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:35,100 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:35,105 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:21:35,113 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:35,121 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:47,009 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:21:47,009 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:21:47,015 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:21:47,063 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:47,204 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:47,208 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:21:47,216 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:47,225 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:47,230 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:47,291 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:21:47,509 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:21:47,509 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:21:47,512 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:47,624 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:47,629 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:21:47,636 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:47,644 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:59,327 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:21:59,328 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:21:59,337 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:21:59,399 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:59,522 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:59,527 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:21:59,534 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:59,542 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:21:59,546 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:59,608 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:21:59,834 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:21:59,834 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:21:59,838 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:21:59,955 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:21:59,961 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:21:59,969 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:21:59,977 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:22:11,867 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:22:11,867 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:22:11,874 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:22:11,921 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:12,044 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:22:12,048 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:22:12,055 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:22:12,063 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:22:12,068 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:12,127 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:22:12,364 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:22:12,364 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:22:12,369 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:12,481 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:22:12,486 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:22:12,494 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:22:12,502 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:22:24,401 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:22:24,401 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:22:24,404 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:22:24,438 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:24,556 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:22:24,561 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:22:24,569 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:22:24,577 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:22:24,581 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:24,642 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:22:24,902 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:22:24,903 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:22:24,911 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:25,050 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:22:25,055 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:22:25,062 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:22:25,070 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:22:36,944 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:22:36,944 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:22:36,952 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:22:36,993 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:37,107 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:22:37,112 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:22:37,119 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:22:37,127 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:22:37,132 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:37,191 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:22:37,490 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:22:37,490 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:22:37,500 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:37,626 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:22:37,631 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:22:37,639 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:22:37,647 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:22:49,534 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:22:49,534 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:22:49,551 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:22:49,621 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:49,753 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:22:49,758 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:22:49,766 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:22:49,774 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:22:49,780 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:49,840 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:22:50,040 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:22:50,041 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:22:50,046 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:22:50,160 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:22:50,165 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:22:50,173 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:22:50,182 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:23:02,567 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-23 15:23:02,567 [printer.py:change_state()] - Adding callback for state: paused
2023-11-23 15:23:02,577 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-23 15:23:02,639 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:23:02,754 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:23:02,758 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-23 15:23:02,765 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:23:02,773 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:23:02,777 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:23:02,837 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-23 15:23:03,066 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-11-23 15:23:03,066 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 15:23:03,072 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 15:23:03,196 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 15:23:03,200 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 15:23:03,208 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode Size: 3236168
2023-11-23 15:23:03,216 [job_status.py:show_file_thumbnail()] - sb_cw1_pcb_cover_clip-on_mount-r1_ABS_36m6s.gcode
2023-11-23 15:45:32,084 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 15:52:33,572 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-23 15:52:33,597 [screen.py:wake_screen()] - Screen wake up
2023-11-23 15:52:33,609 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-23 15:52:36,071 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 15:52:36,072 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 16:23:37,807 [files.py:_callback()] - Error in getting metadata for .thumbs/cable_cover_pcb_ABS_28m19s-300x300.png. Retrying in 6 seconds
2023-11-23 16:23:37,809 [files.py:_callback()] - Error in getting metadata for .thumbs/cable_cover_pcb_ABS_28m19s-32x32.png. Retrying in 6 seconds
2023-11-23 16:23:37,917 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 16:23:37,917 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 16:23:37,922 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-23 16:23:37,926 [job_status.py:update_file_metadata()] - Update Metadata. File: cable_cover_pcb_ABS_28m19s.gcode Size: 2022658
2023-11-23 16:23:37,934 [job_status.py:show_file_thumbnail()] - cable_cover_pcb_ABS_28m19s.gcode
2023-11-23 16:23:37,970 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 16:23:38,086 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 16:23:38,091 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 16:23:38,101 [job_status.py:update_file_metadata()] - Update Metadata. File: cable_cover_pcb_ABS_28m19s.gcode Size: 2022658
2023-11-23 16:23:38,111 [job_status.py:show_file_thumbnail()] - cable_cover_pcb_ABS_28m19s.gcode
2023-11-23 16:52:34,084 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 17:05:44,027 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-23 17:05:44,055 [screen.py:wake_screen()] - Screen wake up
2023-11-23 17:05:44,070 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-23 17:05:46,524 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 17:05:46,524 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 17:38:37,643 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 17:38:37,643 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 17:38:37,652 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-23 17:38:37,711 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 17:38:37,873 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 17:38:37,878 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 17:38:37,886 [job_status.py:update_file_metadata()] - Update Metadata. File: cable_cover_pcb_ABS_28m19s.gcode Size: 2022658
2023-11-23 17:38:37,895 [job_status.py:show_file_thumbnail()] - cable_cover_pcb_ABS_28m19s.gcode
2023-11-23 17:48:01,660 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-11-23 17:48:01,660 [printer.py:change_state()] - Adding callback for state: shutdown
2023-11-23 17:48:01,702 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 17:48:01,781 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 17:48:03,381 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-11-23 17:48:03,381 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 17:48:03,382 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 17:48:03,383 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 17:48:03,431 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 17:48:07,094 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 17:48:07,102 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 17:48:07,103 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 17:48:07,111 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 17:48:07,112 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 17:48:07,616 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 17:48:07,637 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 17:48:07,640 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 17:48:07,645 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 17:48:07,645 [printer.py:reinit()] - # Extruders: 1
2023-11-23 17:48:07,645 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 17:48:07,645 [printer.py:reinit()] - # Fans: 3
2023-11-23 17:48:07,645 [printer.py:reinit()] - # Output pins: 1
2023-11-23 17:48:07,645 [printer.py:reinit()] - # Leds: 1
2023-11-23 17:48:07,657 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 17:48:07,659 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 17:48:07,931 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 17:48:07,951 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 17:48:07,956 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 17:48:07,965 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 17:48:07,966 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 17:48:07,966 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 17:48:07,966 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 17:48:07,967 [screen.py:init_printer()] - Printer initialized
2023-11-23 17:48:07,967 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-23 17:48:07,967 [printer.py:change_state()] - Adding callback for state: startup
2023-11-23 17:48:08,880 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-23 17:48:08,880 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 17:48:08,882 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 17:48:08,947 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 17:48:08,955 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 17:48:08,963 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 17:48:08,968 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 17:48:08,974 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 17:48:08,979 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 17:48:09,019 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 17:50:53,088 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 17:50:53,189 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-300x300.png. Retrying in 6 seconds
2023-11-23 17:50:53,190 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-32x32.png. Retrying in 6 seconds
2023-11-23 17:51:29,378 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 17:51:43,933 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 17:51:58,512 [screen.py:show_popup_message()] - error: Unable to open file
2023-11-23 17:52:16,991 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-300x300.png. Retrying in 6 seconds
2023-11-23 17:52:16,991 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-32x32.png. Retrying in 6 seconds
2023-11-23 17:52:24,378 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 17:52:32,475 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 17:58:28,409 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-64x64.png. Retrying in 6 seconds
2023-11-23 17:58:28,410 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-400x300.png. Retrying in 6 seconds
2023-11-23 17:58:28,410 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-32x32.png. Retrying in 6 seconds
2023-11-23 17:58:36,195 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 17:58:48,569 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 17:59:09,217 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 17:59:23,146 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:00:08,106 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2023-11-23 18:00:08,244 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2023-11-23 18:01:12,419 [screen.py:show_popup_message()] - error: Must home axis first: 150.000 150.000 10.000 [0.000]
2023-11-23 18:01:12,511 [screen.py:show_popup_message()] - error: Must home axis first: 150.000 150.000 10.000 [0.000]
2023-11-23 18:01:31,650 [screen.py:show_popup_message()] - error: Must home before probe
2023-11-23 18:01:31,736 [screen.py:show_popup_message()] - error: Must home before probe
2023-11-23 18:01:40,734 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2023-11-23 18:01:57,736 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2023-11-23 18:02:58,122 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:02:58,123 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:02:58,124 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:02:58,126 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:02:58,175 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:03:01,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:03:01,101 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:03:01,102 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:03:01,112 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:03:01,112 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:03:01,123 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:03:01,366 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:03:01,370 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:03:01,374 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:03:01,375 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:03:01,375 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:03:01,375 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:03:01,375 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:03:01,376 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:03:01,387 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:03:01,388 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:03:01,670 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:03:01,703 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:03:01,709 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:03:01,717 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:03:01,719 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:03:01,719 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:03:01,719 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:03:01,720 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:03:01,721 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 18:03:01,721 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:03:01,725 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:03:01,783 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:03:01,791 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:03:01,797 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:03:01,802 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:03:01,808 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:03:01,813 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:03:01,849 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:03:30,988 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 10.000 [0.000]
2023-11-23 18:03:31,080 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 10.000 [0.000]
2023-11-23 18:03:51,477 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2023-11-23 18:05:44,084 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 18:05:54,178 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 18:05:54,178 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 18:05:54,181 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-23 18:05:54,216 [screen.py:wake_screen()] - Screen wake up
2023-11-23 18:05:54,234 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:05:54,358 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 18:05:54,363 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 18:05:54,370 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c.gcode Size: 545743
2023-11-23 18:05:54,376 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 18:05:54,433 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:05:54,442 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 18:05:55,182 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 18:05:55,182 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:06:03,214 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'standby'
2023-11-23 18:06:09,572 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:06:09,727 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'cancelled'
2023-11-23 18:06:09,731 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c.gcode Size: 545743
2023-11-23 18:06:09,738 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 18:06:26,507 [screen.py:show_popup_message()] - error: // Unknown command:"M141"
2023-11-23 18:06:32,523 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:06:38,333 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'standby'
2023-11-23 18:06:45,493 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:06:45,596 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'cancelled'
2023-11-23 18:06:45,599 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c.gcode Size: 545743
2023-11-23 18:06:45,606 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 18:07:20,527 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:07:33,366 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:12:01,424 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2023-11-23 18:12:59,551 [screen.py:show_popup_message()] - error: Must home X and Y axes first
2023-11-23 18:15:36,766 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 18:15:36,766 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 18:15:36,780 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-11-23 18:15:36,818 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:15:36,933 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 18:15:36,938 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 18:15:36,945 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c.gcode Size: 545743
2023-11-23 18:15:36,953 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 18:15:36,957 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:15:37,025 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 18:15:40,015 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 18:15:40,015 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:29:50,898 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-300x300.png. Retrying in 6 seconds
2023-11-23 18:29:50,899 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-32x32.png. Retrying in 6 seconds
2023-11-23 18:29:58,310 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-11-23 18:29:58,411 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s.gcode Size: 654911
2023-11-23 18:29:58,420 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s.gcode
2023-11-23 18:32:09,351 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:32:09,352 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:32:09,353 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:32:09,356 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:32:09,431 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:32:13,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:32:13,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:32:13,101 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:32:13,108 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:32:13,109 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:32:13,119 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:32:13,161 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:32:13,165 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_hotend = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_hotend = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:32:13,171 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:32:13,171 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:32:13,171 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:32:13,171 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:32:13,171 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:32:13,172 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:32:13,209 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:32:13,211 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:32:13,450 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:32:13,472 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:32:13,477 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:32:13,485 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:32:13,486 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:32:13,486 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:32:13,486 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:32:13,487 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:32:13,488 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 18:32:13,488 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:32:13,491 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:32:13,560 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:32:13,567 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:32:13,573 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:32:13,578 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:32:13,583 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:32:13,588 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:32:13,624 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:32:21,707 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-11-23 18:33:29,218 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:33:29,218 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:33:29,231 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:33:29,237 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:33:29,337 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:33:33,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:33:33,102 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:33:33,103 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:33:33,111 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:33:33,112 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:33:33,121 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:33:33,139 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:33:33,142 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:33:33,149 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:33:33,149 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:33:33,149 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:33:33,149 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:33:33,150 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:33:33,150 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:33:33,164 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:33:33,165 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:33:33,435 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:33:33,461 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:33:33,466 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:33:33,476 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:33:33,477 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:33:33,478 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:33:33,478 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:33:33,478 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:33:33,479 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-23 18:33:33,479 [printer.py:change_state()] - Adding callback for state: startup
2023-11-23 18:33:33,633 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-23 18:33:33,633 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:33:33,635 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:33:33,695 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:33:33,703 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:33:33,708 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:33:33,713 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:33:33,718 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:33:33,723 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:33:33,758 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:33:35,860 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:33:35,861 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:33:35,861 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:33:35,863 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:33:35,901 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:33:39,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:33:39,102 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:33:39,104 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:33:39,111 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:33:39,112 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:33:39,120 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:33:39,138 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:33:39,141 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:33:39,145 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:33:39,145 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:33:39,145 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:33:39,145 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:33:39,145 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:33:39,145 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:33:39,156 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:33:39,158 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:33:39,406 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:33:39,444 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:33:39,454 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:33:39,471 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:33:39,474 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:33:39,474 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:33:39,474 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:33:39,475 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:33:39,476 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 18:33:39,476 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:33:39,481 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:33:39,554 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:33:39,562 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:33:39,567 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:33:39,573 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:33:39,578 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:33:39,583 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:33:39,619 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:34:28,086 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-300x300.png. Retrying in 6 seconds
2023-11-23 18:34:28,086 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-32x32.png. Retrying in 6 seconds
2023-11-23 18:34:33,365 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-11-23 18:37:43,564 [files.py:add_file()] - File already exists: sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s.gcode
2023-11-23 18:37:43,575 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-300x300.png. Retrying in 6 seconds
2023-11-23 18:37:43,577 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_generic_15.5mm_c_c_ABS_7m0s-32x32.png. Retrying in 6 seconds
2023-11-23 18:38:40,341 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c_ABS_6m56s-300x300.png. Retrying in 6 seconds
2023-11-23 18:38:40,343 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c_ABS_6m56s-32x32.png. Retrying in 6 seconds
2023-11-23 18:38:44,474 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-11-23 18:42:16,744 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:42:16,745 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:42:16,746 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:42:16,751 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:42:16,822 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:42:20,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:42:20,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:42:20,101 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:42:20,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:42:20,110 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:42:20,118 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:42:20,297 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:42:20,300 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': ''}, 'gcode_macro START_PRINT': {'gcode': '\n{% set bedtemp = params.BED|int %}\n{% set hotendtemp = params.HOTEND|int %}\nM190 S{bedtemp}\nM109 S{hotendtemp}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set bedtemp = params.BED|int %}\n{% set hotendtemp = params.HOTEND|int %}\nM190 S{bedtemp}\nM109 S{hotendtemp}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:42:20,304 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:42:20,304 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:42:20,304 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:42:20,305 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:42:20,305 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:42:20,305 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:42:20,316 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:42:20,318 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:42:20,571 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:42:20,617 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:42:20,622 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:42:20,630 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:42:20,631 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:42:20,631 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:42:20,632 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:42:20,632 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:42:20,633 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 18:42:20,633 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:42:20,636 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:42:20,696 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:42:20,704 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:42:20,709 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:42:20,715 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:42:20,720 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:42:20,725 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:42:20,760 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:45:34,867 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-64x64.png. Retrying in 6 seconds
2023-11-23 18:45:34,869 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-400x300.png. Retrying in 6 seconds
2023-11-23 18:45:34,869 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-32x32.png. Retrying in 6 seconds
2023-11-23 18:45:40,810 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro START_PRINT:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'HOTEND'
2023-11-23 18:47:02,006 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:47:02,007 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:47:02,007 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:47:02,009 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:47:02,047 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:47:05,094 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:47:05,103 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:47:05,104 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:47:05,112 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:47:05,113 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:47:05,121 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:47:05,140 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:47:05,143 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:47:05,147 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:47:05,147 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:47:05,147 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:47:05,147 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:47:05,147 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:47:05,147 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:47:05,159 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:47:05,160 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:47:05,434 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:47:05,458 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:47:05,463 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:47:05,471 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:47:05,472 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:47:05,473 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:47:05,473 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:47:05,474 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:47:05,475 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 18:47:05,475 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:47:05,478 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:47:05,537 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:47:05,545 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:47:05,550 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:47:05,556 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:47:05,561 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:47:05,566 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:47:05,603 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:47:13,415 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 18:47:13,415 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 18:47:13,442 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:47:13,577 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 18:47:13,582 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 18:47:13,589 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c.gcode Size: 545764
2023-11-23 18:47:13,596 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 18:47:13,600 [screen.py:show_popup_message()] - error: // Unknown command:"START_PRINT"
2023-11-23 18:47:13,609 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 18:47:13,614 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 0.200 [0.000]
2023-11-23 18:47:13,694 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 18:47:14,412 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 18:47:14,412 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:47:34,466 [screen.py:show_popup_message()] - error: // Unknown command:"START_PRINT"
2023-11-23 18:47:34,553 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 18:47:34,560 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-11-23 18:48:52,641 [screen.py:show_popup_message()] - error: // Unknown command:"START_PRINT"
2023-11-23 18:48:52,728 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 18:48:52,739 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-11-23 18:49:04,387 [screen.py:show_popup_message()] - error: // Unknown command:"START_PRINT"
2023-11-23 18:49:04,436 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 18:49:04,444 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-11-23 18:52:00,788 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:52:00,789 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:52:00,791 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:52:00,798 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:52:00,903 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:52:04,096 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:52:04,104 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:52:04,105 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:52:04,113 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:52:04,114 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:52:04,122 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:52:04,352 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:52:04,355 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro START_PRINT': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro start_print': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("30")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:52:04,359 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:52:04,360 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:52:04,360 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:52:04,360 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:52:04,360 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:52:04,360 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:52:04,371 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:52:04,372 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:52:04,661 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:52:04,684 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:52:04,688 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:52:04,699 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:52:04,700 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:52:04,700 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:52:04,700 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:52:04,701 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:52:04,702 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 18:52:04,702 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:52:04,705 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:52:04,764 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:52:04,772 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:52:04,777 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:52:04,782 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:52:04,787 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:52:04,793 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:52:04,829 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:52:13,498 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro START_PRINT:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-11-23 18:53:32,844 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:53:32,844 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:53:32,846 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:53:32,848 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:53:32,887 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:53:36,104 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:53:36,121 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:53:36,123 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:53:36,141 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:53:36,143 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:53:36,166 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:53:36,409 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:53:36,412 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro START_PRINT': {'gcode': '\n{% set bedtemp = params.BED|int %}\n{% set hotendtemp = params.HOTEND|int %}\nM190 S{bedtemp}\nM109 S{hotendtemp}\n\n\n\n\n\n\n\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro start_print': {'gcode': '\n{% set bedtemp = params.BED|int %}\n{% set hotendtemp = params.HOTEND|int %}\nM190 S{bedtemp}\nM109 S{hotendtemp}\n\n\n\n\n\n\n\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:53:36,416 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:53:36,416 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:53:36,416 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:53:36,416 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:53:36,416 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:53:36,416 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:53:36,428 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:53:36,430 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:53:36,711 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:53:36,732 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:53:36,737 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:53:36,749 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:53:36,750 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:53:36,750 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:53:36,750 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:53:36,751 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:53:36,752 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 18:53:36,752 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:53:36,755 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:53:36,820 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:53:36,828 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:53:36,833 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:53:36,839 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:53:36,844 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:53:36,850 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:53:36,887 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:53:45,295 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro START_PRINT:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'HOTEND'
2023-11-23 18:54:09,770 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro START_PRINT:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-11-23 18:55:21,185 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-64x64.png. Retrying in 6 seconds
2023-11-23 18:55:21,185 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-400x300.png. Retrying in 6 seconds
2023-11-23 18:55:21,185 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-32x32.png. Retrying in 6 seconds
2023-11-23 18:55:26,244 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 18:55:26,245 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 18:55:26,269 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:55:26,408 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 18:55:26,412 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 18:55:26,419 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c.gcode Size: 545764
2023-11-23 18:55:26,426 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 18:55:26,430 [screen.py:show_popup_message()] - error: // Unknown command:"PRINT_START"
2023-11-23 18:55:26,438 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 18:55:26,444 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 0.200 [0.000]
2023-11-23 18:55:26,525 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 18:55:27,244 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 18:55:27,244 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:55:47,671 [screen.py:show_popup_message()] - error: // Unknown command:"PRINT_START"
2023-11-23 18:55:47,743 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 18:55:47,751 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-11-23 18:56:52,191 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 18:56:52,192 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 18:56:52,194 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 18:56:52,197 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:56:52,266 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 18:56:55,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:56:55,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 18:56:55,101 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 18:56:55,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 18:56:55,110 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 18:56:55,119 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 18:56:55,137 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 18:56:55,140 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 18:56:55,144 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 18:56:55,144 [printer.py:reinit()] - # Extruders: 1
2023-11-23 18:56:55,144 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 18:56:55,144 [printer.py:reinit()] - # Fans: 3
2023-11-23 18:56:55,144 [printer.py:reinit()] - # Output pins: 1
2023-11-23 18:56:55,144 [printer.py:reinit()] - # Leds: 1
2023-11-23 18:56:55,156 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 18:56:55,157 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 18:56:55,434 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 18:56:55,455 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 18:56:55,460 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 18:56:55,468 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 18:56:55,468 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 18:56:55,469 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 18:56:55,469 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 18:56:55,469 [screen.py:init_printer()] - Printer initialized
2023-11-23 18:56:55,470 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 18:56:55,470 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 18:56:55,473 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 18:56:55,540 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 18:56:55,547 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 18:56:55,552 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 18:56:55,558 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 18:56:55,563 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 18:56:55,568 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 18:56:55,604 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 18:57:07,230 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-11-23 18:58:58,521 [files.py:add_file()] - File already exists: sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 18:59:19,297 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-64x64.png. Retrying in 6 seconds
2023-11-23 18:59:19,298 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-400x300.png. Retrying in 6 seconds
2023-11-23 18:59:19,299 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-32x32.png. Retrying in 6 seconds
2023-11-23 18:59:29,796 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-11-23 19:01:45,976 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 19:01:45,977 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:01:45,978 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:01:45,980 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:01:46,018 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:01:49,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:01:49,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:01:49,100 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:01:49,108 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:01:49,109 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:01:49,118 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:01:49,136 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:01:49,139 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_hotend = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_hotend = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:01:49,143 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:01:49,143 [printer.py:reinit()] - # Extruders: 1
2023-11-23 19:01:49,143 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 19:01:49,143 [printer.py:reinit()] - # Fans: 3
2023-11-23 19:01:49,143 [printer.py:reinit()] - # Output pins: 1
2023-11-23 19:01:49,143 [printer.py:reinit()] - # Leds: 1
2023-11-23 19:01:49,155 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:01:49,156 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:01:49,430 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 19:01:49,452 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 19:01:49,457 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 19:01:49,466 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 19:01:49,467 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 19:01:49,468 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:01:49,468 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:01:49,468 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:01:49,469 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 19:01:49,469 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:01:49,472 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:01:49,531 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 19:01:49,539 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 19:01:49,544 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 19:01:49,550 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 19:01:49,555 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 19:01:49,560 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 19:01:49,597 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 19:02:41,399 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-64x64.png. Retrying in 6 seconds
2023-11-23 19:02:41,400 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-400x300.png. Retrying in 6 seconds
2023-11-23 19:02:41,400 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-32x32.png. Retrying in 6 seconds
2023-11-23 19:02:45,657 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-11-23 19:03:39,050 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 19:03:39,050 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:03:39,052 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:03:39,056 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:03:39,127 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:03:42,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:03:42,101 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:03:42,102 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:03:42,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:03:42,110 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:03:42,119 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:03:42,137 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:03:42,140 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_hotend = params.HOTEND|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_hotend = params.HOTEND|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:03:42,144 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:03:42,145 [printer.py:reinit()] - # Extruders: 1
2023-11-23 19:03:42,145 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 19:03:42,145 [printer.py:reinit()] - # Fans: 3
2023-11-23 19:03:42,145 [printer.py:reinit()] - # Output pins: 1
2023-11-23 19:03:42,145 [printer.py:reinit()] - # Leds: 1
2023-11-23 19:03:42,156 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:03:42,157 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:03:42,441 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 19:03:42,462 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 19:03:42,467 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 19:03:42,476 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 19:03:42,477 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 19:03:42,477 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:03:42,477 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:03:42,477 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:03:42,478 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 19:03:42,478 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:03:42,481 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:03:42,542 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 19:03:42,550 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 19:03:42,555 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 19:03:42,560 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 19:03:42,565 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 19:03:42,570 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 19:03:42,606 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 19:03:49,551 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'HOTEND'
2023-11-23 19:05:55,083 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-23 19:07:51,374 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 19:07:51,375 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:07:51,376 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:07:51,376 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-23 19:07:51,422 [screen.py:wake_screen()] - Screen wake up
2023-11-23 19:07:51,440 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:07:51,485 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:07:55,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:07:55,099 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:07:55,099 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:07:55,106 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:07:55,107 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:07:55,116 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:07:55,210 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:07:55,213 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:07:55,217 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:07:55,218 [printer.py:reinit()] - # Extruders: 1
2023-11-23 19:07:55,218 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 19:07:55,218 [printer.py:reinit()] - # Fans: 3
2023-11-23 19:07:55,218 [printer.py:reinit()] - # Output pins: 1
2023-11-23 19:07:55,218 [printer.py:reinit()] - # Leds: 1
2023-11-23 19:07:55,245 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:07:55,248 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:07:55,500 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 19:07:55,521 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 19:07:55,525 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 19:07:55,534 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 19:07:55,535 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 19:07:55,535 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:07:55,535 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:07:55,536 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:07:55,536 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 19:07:55,536 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:07:55,540 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:07:55,602 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 19:07:55,610 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 19:07:55,615 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 19:07:55,621 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 19:07:55,626 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 19:07:55,631 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 19:07:55,668 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 19:11:01,484 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 19:11:01,484 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:11:01,487 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:11:01,491 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:11:01,579 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:11:05,094 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:11:05,102 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:11:05,103 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:11:05,110 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:11:05,111 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:11:05,119 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:11:05,322 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:11:05,324 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:11:05,329 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:11:05,329 [printer.py:reinit()] - # Extruders: 1
2023-11-23 19:11:05,329 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 19:11:05,331 [printer.py:reinit()] - # Fans: 3
2023-11-23 19:11:05,331 [printer.py:reinit()] - # Output pins: 1
2023-11-23 19:11:05,331 [printer.py:reinit()] - # Leds: 1
2023-11-23 19:11:05,351 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:11:05,353 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:11:05,613 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 19:11:05,634 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 19:11:05,640 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 19:11:05,648 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 19:11:05,649 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 19:11:05,650 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:11:05,650 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:11:05,651 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:11:05,651 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 19:11:05,652 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:11:05,655 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:11:05,716 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 19:11:05,724 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 19:11:05,729 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 19:11:05,735 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 19:11:05,740 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 19:11:05,745 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 19:11:05,782 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 19:11:28,523 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-64x64.png. Retrying in 6 seconds
2023-11-23 19:11:28,523 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-400x300.png. Retrying in 6 seconds
2023-11-23 19:11:28,524 [files.py:_callback()] - Error in getting metadata for .thumbs/sb_adxl_mount_adafruit_19mm_c_c-32x32.png. Retrying in 6 seconds
2023-11-23 19:11:34,149 [screen.py:show_popup_message()] - error: // Unknown command:"START_PRINT"
2023-11-23 19:11:34,277 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 19:11:34,288 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 0.200 [0.000]
2023-11-23 19:12:30,356 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-23 19:12:30,357 [printer.py:change_state()] - Adding callback for state: printing
2023-11-23 19:12:30,375 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:12:30,697 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-23 19:12:30,709 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-23 19:12:30,729 [job_status.py:update_file_metadata()] - Update Metadata. File: sb_adxl_mount_adafruit_19mm_c_c.gcode Size: 545764
2023-11-23 19:12:30,747 [job_status.py:show_file_thumbnail()] - sb_adxl_mount_adafruit_19mm_c_c.gcode
2023-11-23 19:12:30,850 [screen.py:show_popup_message()] - error: // Unknown command:"START_PRINT"
2023-11-23 19:12:30,868 [screen.py:show_popup_message()] - error: // Unknown command:"HOTEND=250"
2023-11-23 19:12:30,886 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 0.200 [0.000]
2023-11-23 19:12:30,907 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-23 19:12:31,364 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-23 19:12:31,365 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:13:30,949 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 19:13:30,949 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:13:30,951 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:13:30,954 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:13:31,027 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:13:34,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:13:34,099 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:13:34,100 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:13:34,108 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:13:34,108 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:13:34,117 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:13:34,136 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:13:34,139 [screen.py:init_printer()] - {'configfile': {'config': {'gcode_macro PRINT_START': {'gcode': ''}, 'gcode_macro START_PRINT': {'gcode': '\n{% set bedtemp = params.BED|int %}\n{% set hotendtemp = params.HOTEND|int %}\nM190 S{bedtemp}\nM109 S{hotendtemp}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state'}, 'gcode_macro PRIME_NOZZLE': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'gcode_macro CLEAN_NOZZLE': {'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10', 'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}'}, 'exclude_object': {}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': '0', 'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _CLIENT_VARIABLE': {'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False', 'gcode': ''}, 'gcode_macro bedfanvars': {'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'PD13', 'kick_start_time': '0.5'}, 'gcode_macro BedFansSlow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BedFansFast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BedFansOff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'temperature_sensor Raspberry_Pi_4': {'sensor_type': 'temperature_host', 'min_temp': '0', 'max_temp': '100'}, 'temperature_sensor Octopus_MCU': {'sensor_type': 'temperature_mcu', 'min_temp': '0', 'max_temp': '100'}, 'bed_mesh': {'mesh_min': '10, 10', 'mesh_max': '280, 280', 'horizontal_move_z': '10', 'probe_count': '5, 5'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3500', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '75', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '240', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.4412757', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'max_extrude_cross_section': '5', 'max_extrude_only_distance': '101', 'control': 'pid', 'pid_kp': '17.974', 'pid_ki': '1.346', 'pid_kd': '59.990'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '42.872', 'pid_ki': '2.027', 'pid_kd': '226.688'}, 'probe': {'pin': '^PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '3', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.400'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'temperature_fan Electronics_Fan': {'pin': 'PD12', 'control': 'watermark', 'max_delta': '3.0', 'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100', 'target_temp': '44'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.001', 'scale': '10'}, 'thermistor CMFB103F3950FANT': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.023437, 0.003437, -0.007813\n0.003750, -0.024063, -0.004688\n0.020625, -0.001563, -0.009688', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '106.98', 'max_x': '191.36', 'min_y': '95.35', 'max_y': '137.13'}, 'bed_mesh Bed 75c': {'version': '1', 'points': '\n0.053125, -0.000625, 0.030625\n0.036250, 0.010000, 0.071875\n0.046875, 0.054375, 0.179375', 'min_x': '10.0', 'max_x': '280.0', 'min_y': '10.0', 'max_y': '280.0', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_2D0020001250335331383820-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'gcode_macro print_start': {'gcode': '', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set bedtemp = params.BED|int %}\n{% set hotendtemp = params.HOTEND|int %}\nM190 S{bedtemp}\nM109 S{hotendtemp}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nBedFansFast\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 2 min"\nG4 P20000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes whirring"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\n\n\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\nSTATUS_OFF\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END\nCLEAN_NOZZLE\nSET_DISPLAY_TEXT MSG="Wait for 2 min"\nG4 P20000\nBedFansOff\nSTATUS_OFF\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=clean_nozzle_state\nG90\nG0 Z2 F5000\nG0 X272 Y300 F10000\n{% for wipe in range(8) %}\n{% for coordinate in [(207,300),(257,300)] %}\nG0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} Z-1 F6000\n{% endfor %}\n{% endfor %}\nG0 X272 Y300 Z2 F5000\nRESTORE_GCODE_STATE NAME=clean_nozzle_state', 'description': 'G-Code macro'}, 'gcode_macro prime_nozzle': {'gcode': "\n{% if printer['heater_fan Nevermore'].speed > 0 %}\nSET_FAN_SPEED FAN=Nevermore SPEED=0\n{% else %}\nSET_FAN_SPEED FAN=Nevermore SPEED=1\n{% endif %}", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'True', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Cleaning Nozzle"\nSTATUS_CLEANING\n\nG90\n\nG1 X{start_x} Y{start_y} F6000\nG1 Z{start_z} F1500\n\n\n{% for wipes in range(1, (wipe_qty + 1)) %}\nG1 X{start_x + wipe_dist} F{wipe_spd * 60}\nG1 X{start_x} F{wipe_spd * 60}\n{% endfor %}\n\n\nG1 Z{raise_distance}', 'description': 'G-Code macro', 'variable_start_x': '257', 'variable_start_y': '300', 'variable_start_z': '-1', 'variable_wipe_dist': '-50', 'variable_wipe_qty': '5', 'variable_wipe_spd': '200', 'variable_raise_distance': '10'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == \'true\'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_x is not defined\nelse "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = ""                                    if not macro_found\nelse ""                                    if client.park_at_cancel_y is not defined\nelse "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}", 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': '0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\n{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == \'true\'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n{% set macro_found = True if printer[\'gcode_macro _CLIENT_VARIABLE\'] is defined else False %}\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == \'true\' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _client_variable': {'gcode': '', 'description': 'G-Code macro', 'variable_use_custom_pos': 'True', 'variable_custom_park_x': '150.0', 'variable_custom_park_y': '10.0', 'variable_custom_park_dz': '2.0', 'variable_retract': '1.0', 'variable_cancel_retract': '5.0', 'variable_speed_retract': '35.0', 'variable_unretract': '1.0', 'variable_speed_unretract': '35.0', 'variable_speed_hop': '15.0', 'variable_speed_move': '100.0', 'variable_park_at_cancel': 'True', 'variable_park_at_cancel_x': '295.0', 'variable_park_at_cancel_y': '295.0', 'variable_use_fw_retract': 'False'}, 'gcode_macro bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '65', 'variable_fast': '0.6', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBedFansSlow\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBedFansOff\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBedFansSlow\n{% else %}\nBedFansOff\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n\n\n{% if S >= THRESHOLD %}\nBedFansFast\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBedFansOff\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBedFansFast\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'temperature_sensor raspberry_pi_4': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 0.0, 'max_temp': 100.0}, 'temperature_sensor octopus_mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': 0.0, 'max_temp': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [280.0, 280.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.023437, 0.003437, -0.007813], [0.00375, -0.024063, -0.004688], [0.020625, -0.001563, -0.009688]], 'min_x': 106.98, 'max_x': 191.36, 'min_y': 95.35, 'max_y': 137.13, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'bed_mesh bed 75c': {'version': 1, 'points': [[0.053125, -0.000625, 0.030625], [0.03625, 0.01, 0.071875], [0.046875, 0.054375, 0.179375]], 'min_x': 10.0, 'max_x': 280.0, 'min_y': 10.0, 'max_y': 280.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 75.0, 'second_homing_speed': 37.5, 'homing_retract_speed': 75.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 240.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.974, 'pid_ki': 1.346, 'pid_kd': 59.99, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 101.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.4412757, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.872, 'pid_ki': 2.027, 'pid_kd': 226.688, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.4, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^PG15', 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'temperature_fan electronics_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PD12', 'min_temp': 10.0, 'max_temp': 100.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 1.0, 'min_speed': 0.3, 'target_temp': 44.0, 'control': 'watermark', 'max_delta': 3.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.001, 'hardware_pwm': False, 'scale': 10.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'thermistor cmfb103f3950fant': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 3500.0, 'max_accel_to_decel': 1750.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:13:34,143 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:13:34,144 [printer.py:reinit()] - # Extruders: 1
2023-11-23 19:13:34,144 [printer.py:reinit()] - # Temperature devices: 4
2023-11-23 19:13:34,144 [printer.py:reinit()] - # Fans: 3
2023-11-23 19:13:34,144 [printer.py:reinit()] - # Output pins: 1
2023-11-23 19:13:34,144 [printer.py:reinit()] - # Leds: 1
2023-11-23 19:13:34,156 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:13:34,157 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:13:34,431 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor Raspberry_Pi_4&temperature_sensor Octopus_MCU&temperature_fan Electronics_Fan&fan&fan_generic BedFans&heater_fan hotend_fan&output_pin caselight&neopixel sb_leds
2023-11-23 19:13:34,452 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-23 19:13:34,457 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor Raspberry_Pi_4', 'temperature_sensor Octopus_MCU', 'heater_bed', 'temperature_fan Electronics_Fan', 'extruder']
2023-11-23 19:13:34,467 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-23 19:13:34,468 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-23 19:13:34,468 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:13:34,468 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:13:34,468 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:13:34,469 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-23 19:13:34,469 [printer.py:change_state()] - Adding callback for state: ready
2023-11-23 19:13:34,472 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:13:34,532 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-23 19:13:34,542 [main_menu.py:add_device()] - Adding device: extruder
2023-11-23 19:13:34,548 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-23 19:13:34,555 [main_menu.py:add_device()] - Adding device: temperature_sensor Raspberry_Pi_4
2023-11-23 19:13:34,561 [main_menu.py:add_device()] - Adding device: temperature_sensor Octopus_MCU
2023-11-23 19:13:34,567 [main_menu.py:add_device()] - Adding device: temperature_fan Electronics_Fan
2023-11-23 19:13:34,608 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-23 19:13:40,380 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro START_PRINT:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'HOTEND'
2023-11-23 19:15:26,792 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-23 19:15:26,793 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:15:26,794 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:15:26,798 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:15:26,862 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:15:30,092 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:15:30,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:15:30,101 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:15:30,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:15:30,110 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:15:30,120 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:15:30,308 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:15:30,309 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:15:30,310 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:15:30,310 [printer.py:reinit()] - # Extruders: 0
2023-11-23 19:15:30,310 [printer.py:reinit()] - # Temperature devices: 0
2023-11-23 19:15:30,310 [printer.py:reinit()] - # Fans: 0
2023-11-23 19:15:30,310 [printer.py:reinit()] - # Output pins: 0
2023-11-23 19:15:30,310 [printer.py:reinit()] - # Leds: 0
2023-11-23 19:15:30,320 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:15:30,322 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:15:30,562 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-11-23 19:15:30,563 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:15:30,564 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:15:30,565 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:15:30,565 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-11-23 19:15:30,565 [printer.py:change_state()] - Adding callback for state: error
2023-11-23 19:15:30,567 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:15:30,607 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:16:00,385 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-11-23 19:16:00,385 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:16:00,386 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:16:00,388 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:16:00,446 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:16:04,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:16:04,099 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:16:04,099 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:16:04,107 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:16:04,108 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:16:04,116 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:16:04,366 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:16:04,367 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:16:04,367 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:16:04,368 [printer.py:reinit()] - # Extruders: 0
2023-11-23 19:16:04,368 [printer.py:reinit()] - # Temperature devices: 0
2023-11-23 19:16:04,368 [printer.py:reinit()] - # Fans: 0
2023-11-23 19:16:04,368 [printer.py:reinit()] - # Output pins: 0
2023-11-23 19:16:04,368 [printer.py:reinit()] - # Leds: 0
2023-11-23 19:16:04,378 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:16:04,378 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:16:04,619 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-11-23 19:16:04,622 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:16:04,622 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:16:04,623 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:16:04,623 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-11-23 19:16:04,623 [printer.py:change_state()] - Adding callback for state: error
2023-11-23 19:16:04,625 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:16:04,664 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:16:47,388 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-11-23 19:16:47,388 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:16:47,390 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:16:47,394 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:16:47,466 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:16:51,092 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:16:51,102 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:16:51,103 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:16:51,111 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:16:51,112 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:16:51,121 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:16:51,135 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-23 19:16:51,136 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-23 19:16:51,136 [printer.py:reinit()] - Klipper version: v0.12.0-10-gea2f6bc0
2023-11-23 19:16:51,136 [printer.py:reinit()] - # Extruders: 0
2023-11-23 19:16:51,136 [printer.py:reinit()] - # Temperature devices: 0
2023-11-23 19:16:51,136 [printer.py:reinit()] - # Fans: 0
2023-11-23 19:16:51,136 [printer.py:reinit()] - # Output pins: 0
2023-11-23 19:16:51,136 [printer.py:reinit()] - # Leds: 0
2023-11-23 19:16:51,146 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-23 19:16:51,147 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-23 19:16:51,388 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-11-23 19:16:51,392 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-11-23 19:16:51,392 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-23 19:16:51,392 [screen.py:init_printer()] - Printer initialized
2023-11-23 19:16:51,392 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-11-23 19:16:51,393 [printer.py:change_state()] - Adding callback for state: error
2023-11-23 19:16:51,394 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:16:51,434 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:24:10,546 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-11-23 19:24:10,547 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-23 19:24:10,548 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-23 19:24:10,550 [screen.py:show_panel()] - Reinitializing panel
2023-11-23 19:24:10,613 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-23 19:24:14,092 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:24:14,099 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-23 19:24:14,101 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'timelapse', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'timelapse', 'timelapse_frames', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-204-gfb15b2a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2023-11-23 19:24:14,110 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-23 19:24:14,112 [printer.py:configure_cameras()] - Cameras: [{'name': 'Trident Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam?action=stream', 'snapshot_url': '/webcam?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'ddbe0a0f-6c50-4eb5-9f4f-d2d5a88ca924'}]
2023-11-23 19:24:14,120 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-23 19:24:14,369 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
